// Enhanced types for function-specific result handling
// This file is NOT regenerated by sync-data.ts

import type { CCLFunction } from "./types.js";

export interface FunctionSpecificResult {
	type:
		| "entries"
		| "object"
		| "hierarchy"
		| "value"
		| "list"
		| "error"
		| "placeholder";
	content: unknown;
	language: string;
	metadata: {
		functionType: CCLFunction;
		valueType?: "string" | "int" | "float" | "bool";
		itemCount?: number;
		keyCount?: number;
		count?: number;
		isImplemented: boolean;
	};
}

// Function implementation status
export const FUNCTION_STATUS: Record<
	CCLFunction,
	"implemented" | "planned" | "experimental"
> = {
	parse: "implemented",
	parse_value: "planned",
	filter: "planned",
	build_hierarchy: "implemented",
	get_string: "planned",
	expand_dotted: "planned",
	get_list: "planned",
	get_int: "planned",
	get_float: "planned",
	get_bool: "planned",
	associativity: "experimental",
	round_trip: "experimental",
	canonical_format: "experimental",
};

// Function descriptions for UI
export const FUNCTION_DESCRIPTIONS: Record<CCLFunction, string> = {
	parse: "Parse CCL text into key-value entries",
	parse_value: "Parse CCL text into key-value entries (alternative validation)",
	filter: "Filter entries based on criteria",
	build_hierarchy: "Convert flat entries into nested object structure",
	get_string: "Extract string value from CCL data",
	expand_dotted: "Expand dotted keys into nested structure",
	get_list: "Extract list/array values from CCL data",
	get_int: "Extract integer value from CCL data",
	get_float: "Extract floating-point value from CCL data",
	get_bool: "Extract boolean value from CCL data",
	associativity: "Validate associative properties of CCL operations",
	round_trip: "Validate round-trip conversion properties",
	canonical_format: "Validate canonical formatting properties",
};
