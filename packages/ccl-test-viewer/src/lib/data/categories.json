[
  {
    "name": "Advanced Processing",
    "description": "Complex processing and composition",
    "tests": [
      {
        "behaviors": [],
        "expected": {
          "count": 4,
          "entries": [
            {
              "key": "a",
              "value": "1"
            },
            {
              "key": "b",
              "value": "2"
            },
            {
              "key": "b",
              "value": "20"
            },
            {
              "key": "c",
              "value": "3"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "a = 1\nb = 2\nb = 20\nc = 3",
        "name": "composition_stability_duplicate_keys_parse",
        "source_test": "composition_stability_duplicate_keys",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 3,
          "entries": [
            {
              "key": "ports",
              "value": "8000"
            },
            {
              "key": "ports",
              "value": "8001"
            },
            {
              "key": "ports",
              "value": "8002"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "ports = 8000\nports = 8001\nports = 8002",
        "name": "multiple_values_same_key_parse",
        "source_test": "multiple_values_same_key",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 3,
          "entries": [
            {
              "key": "",
              "value": "3"
            },
            {
              "key": "",
              "value": "1"
            },
            {
              "key": "",
              "value": "2"
            }
          ]
        },
        "features": [
          "empty_keys"
        ],
        "functions": [
          "parse"
        ],
        "input": "= 3\n= 1\n= 2",
        "name": "list_with_empty_keys_parse",
        "source_test": "list_with_empty_keys",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "",
              "value": "= Section 2 =="
            }
          ]
        },
        "features": [
          "empty_keys"
        ],
        "functions": [
          "parse"
        ],
        "input": "== Section 2 ==",
        "name": "section_style_syntax_parse",
        "source_test": "section_style_syntax",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 4,
          "entries": [
            {
              "key": "b",
              "value": "20"
            },
            {
              "key": "c",
              "value": "3"
            },
            {
              "key": "a",
              "value": "1"
            },
            {
              "key": "b",
              "value": "2"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "b = 20\nc = 3\na = 1\nb = 2",
        "name": "composition_stability_ba_parse",
        "source_test": "composition_stability_ba",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 4,
          "entries": [
            {
              "key": "name",
              "value": "app"
            },
            {
              "key": "ports",
              "value": "8000"
            },
            {
              "key": "name",
              "value": "service"
            },
            {
              "key": "ports",
              "value": "8001"
            }
          ]
        },
        "features": [
          "empty_keys"
        ],
        "functions": [
          "parse"
        ],
        "input": "name = app\nports = 8000\nname = service\nports = 8001",
        "name": "mixed_keys_with_duplicates_parse",
        "source_test": "mixed_keys_with_duplicates",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 3,
          "entries": [
            {
              "key": "1",
              "value": ""
            },
            {
              "key": "2",
              "value": ""
            },
            {
              "key": "3",
              "value": ""
            }
          ]
        },
        "features": [
          "empty_keys"
        ],
        "functions": [
          "parse"
        ],
        "input": "1 =\n2 =\n3 =",
        "name": "array_style_list_parse",
        "source_test": "array_style_list",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 3,
          "entries": [
            {
              "key": "",
              "value": "= Database Config =="
            },
            {
              "key": "host",
              "value": "localhost"
            },
            {
              "key": "port",
              "value": "5432"
            }
          ]
        },
        "features": [
          "empty_keys"
        ],
        "functions": [
          "parse"
        ],
        "input": "== Database Config ==\nhost = localhost\nport = 5432",
        "name": "section_header_double_equals_parse",
        "source_test": "section_header_double_equals",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 3,
          "entries": [
            {
              "key": "",
              "value": "== Server Settings ==="
            },
            {
              "key": "host",
              "value": "0.0.0.0"
            },
            {
              "key": "ssl",
              "value": "true"
            }
          ]
        },
        "features": [
          "empty_keys"
        ],
        "functions": [
          "parse"
        ],
        "input": "=== Server Settings ===\nhost = 0.0.0.0\nssl = true",
        "name": "section_header_triple_equals_parse",
        "source_test": "section_header_triple_equals",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 6,
          "entries": [
            {
              "key": "",
              "value": "= Database =="
            },
            {
              "key": "host",
              "value": "localhost"
            },
            {
              "key": "",
              "value": "== Cache ==="
            },
            {
              "key": "redis",
              "value": "enabled"
            },
            {
              "key": "",
              "value": "= Logging =="
            },
            {
              "key": "level",
              "value": "info"
            }
          ]
        },
        "features": [
          "empty_keys"
        ],
        "functions": [
          "parse"
        ],
        "input": "== Database ==\nhost = localhost\n\n=== Cache ===\nredis = enabled\n\n== Logging ==\nlevel = info",
        "name": "multiple_sections_with_entries_parse",
        "source_test": "multiple_sections_with_entries",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 6,
          "entries": [
            {
              "key": "",
              "value": "= Configuration =="
            },
            {
              "key": "",
              "value": "item1"
            },
            {
              "key": "",
              "value": "item2"
            },
            {
              "key": "key",
              "value": "value"
            },
            {
              "key": "",
              "value": "== Next Section ==="
            },
            {
              "key": "other",
              "value": "data"
            }
          ]
        },
        "features": [
          "empty_keys"
        ],
        "functions": [
          "parse"
        ],
        "input": "== Configuration ==\n= item1\n= item2\nkey = value\n=== Next Section ===\nother = data",
        "name": "section_headers_mixed_with_lists_parse",
        "source_test": "section_headers_mixed_with_lists",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "",
              "value": "= Empty Section =="
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "== Empty Section ==",
        "name": "empty_section_header_only_parse",
        "source_test": "empty_section_header_only",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 2,
          "entries": [
            {
              "key": "key",
              "value": "value"
            },
            {
              "key": "",
              "value": "= Final Section =="
            }
          ]
        },
        "features": [
          "empty_keys"
        ],
        "functions": [
          "parse"
        ],
        "input": "key = value\n== Final Section ==",
        "name": "section_header_at_end_parse",
        "source_test": "section_header_at_end",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 4,
          "entries": [
            {
              "key": "",
              "value": "= Database Config"
            },
            {
              "key": "host",
              "value": "localhost"
            },
            {
              "key": "",
              "value": "== Server Settings"
            },
            {
              "key": "port",
              "value": "8080"
            }
          ]
        },
        "features": [
          "empty_keys"
        ],
        "functions": [
          "parse"
        ],
        "input": "== Database Config\nhost = localhost\n=== Server Settings\nport = 8080",
        "name": "section_headers_no_trailing_equals_parse",
        "source_test": "section_headers_no_trailing_equals",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 4,
          "entries": [
            {
              "key": "",
              "value": "= Database: Production =="
            },
            {
              "key": "host",
              "value": "db.prod.com"
            },
            {
              "key": "",
              "value": "== Cache: Redis Config ==="
            },
            {
              "key": "port",
              "value": "6379"
            }
          ]
        },
        "features": [
          "empty_keys"
        ],
        "functions": [
          "parse"
        ],
        "input": "== Database: Production ==\nhost = db.prod.com\n=== Cache: Redis Config ===\nport = 6379",
        "name": "section_headers_with_colons_parse",
        "source_test": "section_headers_with_colons",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 4,
          "entries": [
            {
              "key": "",
              "value": "= spaced equals"
            },
            {
              "key": "",
              "value": "= wide spaces"
            },
            {
              "key": "",
              "value": "= Real Header =="
            },
            {
              "key": "key",
              "value": "value"
            }
          ]
        },
        "features": [
          "empty_keys"
        ],
        "functions": [
          "parse"
        ],
        "input": "= = spaced equals\n=  = wide spaces\n== Real Header ==\nkey = value",
        "name": "spaced_equals_not_section_header_parse",
        "source_test": "spaced_equals_not_section_header",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 4,
          "entries": [
            {
              "key": "",
              "value": "= First Section =="
            },
            {
              "key": "",
              "value": "== Nested Section ==="
            },
            {
              "key": "",
              "value": "=== Deep Section ===="
            },
            {
              "key": "key",
              "value": "value"
            }
          ]
        },
        "features": [
          "empty_keys"
        ],
        "functions": [
          "parse"
        ],
        "input": "== First Section ==\n=== Nested Section ===\n==== Deep Section ====\nkey = value",
        "name": "consecutive_section_headers_parse",
        "source_test": "consecutive_section_headers",
        "validation": "parse",
        "variants": []
      }
    ],
    "file": "api_advanced_processing.json"
  },
  {
    "name": "Comments",
    "description": "Comment syntax and filtering",
    "tests": [
      {
        "behaviors": [],
        "expected": {
          "count": 6,
          "entries": [
            {
              "key": "/",
              "value": "This is an environment section"
            },
            {
              "key": "port",
              "value": "8080"
            },
            {
              "key": "serve",
              "value": "index.html"
            },
            {
              "key": "/",
              "value": "Database section"
            },
            {
              "key": "mode",
              "value": "in-memory"
            },
            {
              "key": "connections",
              "value": "16"
            }
          ]
        },
        "features": [
          "comments"
        ],
        "functions": [
          "parse"
        ],
        "input": "/= This is an environment section\nport = 8080\nserve = index.html\n/= Database section\nmode = in-memory\nconnections = 16",
        "name": "comment_extension_parse",
        "source_test": "comment_extension",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 6,
          "entries": [
            {
              "key": "/",
              "value": "This is an environment section"
            },
            {
              "key": "port",
              "value": "8080"
            },
            {
              "key": "serve",
              "value": "index.html"
            },
            {
              "key": "/",
              "value": "Database section"
            },
            {
              "key": "mode",
              "value": "in-memory"
            },
            {
              "key": "connections",
              "value": "16"
            }
          ]
        },
        "features": [
          "comments"
        ],
        "functions": [
          "filter"
        ],
        "input": "/= This is an environment section\nport = 8080\nserve = index.html\n/= Database section\nmode = in-memory\nconnections = 16",
        "name": "comment_extension_filter",
        "source_test": "comment_extension",
        "validation": "filter",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "/",
              "value": "this is a comment"
            }
          ]
        },
        "features": [
          "comments"
        ],
        "functions": [
          "parse"
        ],
        "input": "/= this is a comment",
        "name": "comment_syntax_slash_equals_parse",
        "source_test": "comment_syntax_slash_equals",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "/",
              "value": "this is a comment"
            }
          ]
        },
        "features": [
          "comments"
        ],
        "functions": [
          "filter"
        ],
        "input": "/= this is a comment",
        "name": "comment_syntax_slash_equals_filter",
        "source_test": "comment_syntax_slash_equals",
        "validation": "filter",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 6,
          "entries": [
            {
              "key": "",
              "value": "= Database Config =="
            },
            {
              "key": "/",
              "value": "Connection settings"
            },
            {
              "key": "host",
              "value": "localhost"
            },
            {
              "key": "",
              "value": "== Cache Config ==="
            },
            {
              "key": "/",
              "value": "Redis configuration"
            },
            {
              "key": "port",
              "value": "6379"
            }
          ]
        },
        "features": [
          "comments",
          "empty_keys"
        ],
        "functions": [
          "parse"
        ],
        "input": "== Database Config ==\n/= Connection settings\nhost = localhost\n=== Cache Config ===\n/= Redis configuration\nport = 6379",
        "name": "section_headers_with_comments_parse",
        "source_test": "section_headers_with_comments",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 6,
          "entries": [
            {
              "key": "",
              "value": "= Database Config =="
            },
            {
              "key": "/",
              "value": "Connection settings"
            },
            {
              "key": "host",
              "value": "localhost"
            },
            {
              "key": "",
              "value": "== Cache Config ==="
            },
            {
              "key": "/",
              "value": "Redis configuration"
            },
            {
              "key": "port",
              "value": "6379"
            }
          ]
        },
        "features": [
          "comments",
          "empty_keys"
        ],
        "functions": [
          "filter"
        ],
        "input": "== Database Config ==\n/= Connection settings\nhost = localhost\n=== Cache Config ===\n/= Redis configuration\nport = 6379",
        "name": "section_headers_with_comments_filter",
        "source_test": "section_headers_with_comments",
        "validation": "filter",
        "variants": []
      }
    ],
    "file": "api_comments.json"
  },
  {
    "name": "Hierarchy Building",
    "description": "Object construction and hierarchy building",
    "tests": [
      {
        "behaviors": [],
        "expected": {
          "count": 2,
          "entries": [
            {
              "key": "name",
              "value": "Alice"
            },
            {
              "key": "age",
              "value": "42"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "name = Alice\nage = 42",
        "name": "basic_object_construction_parse",
        "source_test": "basic_object_construction",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "age": "42",
            "name": "Alice"
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "name = Alice\nage = 42",
        "name": "basic_object_construction_build_hierarchy",
        "source_test": "basic_object_construction",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "server",
              "value": "\n  database =\n    host = localhost\n    port = 5432\n  cache =\n    enabled = true"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "server =\n  database =\n    host = localhost\n    port = 5432\n  cache =\n    enabled = true",
        "name": "deep_nested_objects_parse",
        "source_test": "deep_nested_objects",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "server": {
              "cache": {
                "enabled": "true"
              },
              "database": {
                "host": "localhost",
                "port": "5432"
              }
            }
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "server =\n  database =\n    host = localhost\n    port = 5432\n  cache =\n    enabled = true",
        "name": "deep_nested_objects_build_hierarchy",
        "source_test": "deep_nested_objects",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 3,
          "entries": [
            {
              "key": "item",
              "value": "first"
            },
            {
              "key": "item",
              "value": "second"
            },
            {
              "key": "item",
              "value": "third"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "item = first\nitem = second\nitem = third",
        "name": "duplicate_keys_to_lists_parse",
        "source_test": "duplicate_keys_to_lists",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "item": [
              "first",
              "second",
              "third"
            ]
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "item = first\nitem = second\nitem = third",
        "name": "duplicate_keys_to_lists_build_hierarchy",
        "source_test": "duplicate_keys_to_lists",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "config",
              "value": "\n  server = web1\n  server = web2\n  port = 80"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "config =\n  server = web1\n  server = web2\n  port = 80",
        "name": "nested_duplicate_keys_parse",
        "source_test": "nested_duplicate_keys",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "config": {
              "port": "80",
              "server": [
                "web1",
                "web2"
              ]
            }
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "config =\n  server = web1\n  server = web2\n  port = 80",
        "name": "nested_duplicate_keys_build_hierarchy",
        "source_test": "nested_duplicate_keys",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 3,
          "entries": [
            {
              "key": "name",
              "value": "Alice"
            },
            {
              "key": "config",
              "value": "\n  debug = true\n  timeout = 30"
            },
            {
              "key": "version",
              "value": "1.0"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "name = Alice\nconfig =\n  debug = true\n  timeout = 30\nversion = 1.0",
        "name": "mixed_flat_and_nested_parse",
        "source_test": "mixed_flat_and_nested",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "config": {
              "debug": "true",
              "timeout": "30"
            },
            "name": "Alice",
            "version": "1.0"
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "name = Alice\nconfig =\n  debug = true\n  timeout = 30\nversion = 1.0",
        "name": "mixed_flat_and_nested_build_hierarchy",
        "source_test": "mixed_flat_and_nested",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "environments",
              "value": "\n  prod =\n    server = web1\n    server = web2\n    port = 80\n  dev =\n    server = localhost\n    port = 3000"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "environments =\n  prod =\n    server = web1\n    server = web2\n    port = 80\n  dev =\n    server = localhost\n    port = 3000",
        "name": "nested_objects_with_lists_parse",
        "source_test": "nested_objects_with_lists",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "environments": {
              "dev": {
                "port": "3000",
                "server": "localhost"
              },
              "prod": {
                "port": "80",
                "server": [
                  "web1",
                  "web2"
                ]
              }
            }
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "environments =\n  prod =\n    server = web1\n    server = web2\n    port = 80\n  dev =\n    server = localhost\n    port = 3000",
        "name": "nested_objects_with_lists_build_hierarchy",
        "source_test": "nested_objects_with_lists",
        "validation": "build_hierarchy",
        "variants": []
      }
    ],
    "file": "api_core_ccl_hierarchy.json"
  },
  {
    "name": "Integration",
    "description": "Cross-function integration tests",
    "tests": [
      {
        "behaviors": [],
        "expected": {
          "count": 2,
          "entries": [
            {
              "key": "name",
              "value": "Alice"
            },
            {
              "key": "age",
              "value": "42"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "name = Alice\nage = 42",
        "name": "complete_basic_workflow_parse",
        "source_test": "complete_basic_workflow",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "age": "42",
            "name": "Alice"
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "name = Alice\nage = 42",
        "name": "complete_basic_workflow_build_hierarchy",
        "source_test": "complete_basic_workflow",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "database",
              "value": "\n  host = localhost\n  port = 5432\n  enabled = true"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "database =\n  host = localhost\n  port = 5432\n  enabled = true",
        "name": "complete_nested_workflow_parse",
        "source_test": "complete_nested_workflow",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "database": {
              "enabled": "true",
              "host": "localhost",
              "port": "5432"
            }
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "database =\n  host = localhost\n  port = 5432\n  enabled = true",
        "name": "complete_nested_workflow_build_hierarchy",
        "source_test": "complete_nested_workflow",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 3,
          "entries": [
            {
              "key": "app",
              "value": "MyApp"
            },
            {
              "key": "version",
              "value": "1.0.0"
            },
            {
              "key": "config",
              "value": "\n  debug = true\n  features =\n    feature1 = enabled\n    feature2 = disabled"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "app = MyApp\nversion = 1.0.0\nconfig =\n  debug = true\n  features =\n    feature1 = enabled\n    feature2 = disabled",
        "name": "complete_mixed_workflow_parse",
        "source_test": "complete_mixed_workflow",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "app": "MyApp",
            "config": {
              "debug": "true",
              "features": {
                "feature1": "enabled",
                "feature2": "disabled"
              }
            },
            "version": "1.0.0"
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "app = MyApp\nversion = 1.0.0\nconfig =\n  debug = true\n  features =\n    feature1 = enabled\n    feature2 = disabled",
        "name": "complete_mixed_workflow_build_hierarchy",
        "source_test": "complete_mixed_workflow",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 2,
          "entries": [
            {
              "key": "servers",
              "value": "\n  server = web1\n  server = web2\n  server = web3"
            },
            {
              "key": "ports",
              "value": "\n  port = 80\n  port = 443"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "servers =\n  server = web1\n  server = web2\n  server = web3\nports =\n  port = 80\n  port = 443",
        "name": "complete_lists_workflow_parse",
        "source_test": "complete_lists_workflow",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "ports": {
              "port": [
                "80",
                "443"
              ]
            },
            "servers": {
              "server": [
                "web1",
                "web2",
                "web3"
              ]
            }
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "servers =\n  server = web1\n  server = web2\n  server = web3\nports =\n  port = 80\n  port = 443",
        "name": "complete_lists_workflow_build_hierarchy",
        "source_test": "complete_lists_workflow",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 2,
          "entries": [
            {
              "key": "description",
              "value": "Welcome to our app\n  This is a multi-line description\n  With several lines"
            },
            {
              "key": "config",
              "value": "\n  settings =\n    value1 = one\n    value2 = two"
            }
          ]
        },
        "features": [
          "multiline"
        ],
        "functions": [
          "parse"
        ],
        "input": "description = Welcome to our app\n  This is a multi-line description\n  With several lines\nconfig =\n  settings =\n    value1 = one\n    value2 = two",
        "name": "complete_multiline_workflow_parse",
        "source_test": "complete_multiline_workflow",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "config": {
              "settings": {
                "value1": "one",
                "value2": "two"
              }
            },
            "description": "Welcome to our app\n  This is a multi-line description\n  With several lines"
          }
        },
        "features": [
          "multiline"
        ],
        "functions": [
          "build_hierarchy"
        ],
        "input": "description = Welcome to our app\n  This is a multi-line description\n  With several lines\nconfig =\n  settings =\n    value1 = one\n    value2 = two",
        "name": "complete_multiline_workflow_build_hierarchy",
        "source_test": "complete_multiline_workflow",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 5,
          "entries": [
            {
              "key": "service",
              "value": "MyMicroservice"
            },
            {
              "key": "version",
              "value": "2.1.0"
            },
            {
              "key": "database",
              "value": "\n  host = db.example.com\n  port = 5432\n  credentials =\n    user = service_user\n    password = secret123\n  pools =\n    read = 5\n    write = 2"
            },
            {
              "key": "logging",
              "value": "\n  level = info\n  outputs =\n    output = console\n    output = file\n    output = syslog"
            },
            {
              "key": "features",
              "value": "\n  feature_a = enabled\n  feature_b = disabled\n  feature_c = experimental"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "service = MyMicroservice\nversion = 2.1.0\ndatabase =\n  host = db.example.com\n  port = 5432\n  credentials =\n    user = service_user\n    password = secret123\n  pools =\n    read = 5\n    write = 2\nlogging =\n  level = info\n  outputs =\n    output = console\n    output = file\n    output = syslog\nfeatures =\n  feature_a = enabled\n  feature_b = disabled\n  feature_c = experimental",
        "name": "real_world_complete_workflow_parse",
        "source_test": "real_world_complete_workflow",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "database": {
              "credentials": {
                "password": "secret123",
                "user": "service_user"
              },
              "host": "db.example.com",
              "pools": {
                "read": "5",
                "write": "2"
              },
              "port": "5432"
            },
            "features": {
              "feature_a": "enabled",
              "feature_b": "disabled",
              "feature_c": "experimental"
            },
            "logging": {
              "level": "info",
              "outputs": {
                "output": [
                  "console",
                  "file",
                  "syslog"
                ]
              }
            },
            "service": "MyMicroservice",
            "version": "2.1.0"
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "service = MyMicroservice\nversion = 2.1.0\ndatabase =\n  host = db.example.com\n  port = 5432\n  credentials =\n    user = service_user\n    password = secret123\n  pools =\n    read = 5\n    write = 2\nlogging =\n  level = info\n  outputs =\n    output = console\n    output = file\n    output = syslog\nfeatures =\n  feature_a = enabled\n  feature_b = disabled\n  feature_c = experimental",
        "name": "real_world_complete_workflow_build_hierarchy",
        "source_test": "real_world_complete_workflow",
        "validation": "build_hierarchy",
        "variants": []
      }
    ],
    "file": "api_core_ccl_integration.json"
  },
  {
    "name": "Core Parsing",
    "description": "Basic CCL parsing functionality",
    "tests": [
      {
        "behaviors": [],
        "expected": {
          "count": 2,
          "entries": [
            {
              "key": "name",
              "value": "Alice"
            },
            {
              "key": "age",
              "value": "42"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "name = Alice\nage = 42",
        "name": "basic_key_value_pairs_parse",
        "source_test": "basic_key_value_pairs",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 2,
          "entries": [
            {
              "key": "msg",
              "value": "k=v pairs work fine"
            },
            {
              "key": "path",
              "value": "/bin/app=prod"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "msg = k=v pairs work fine\npath = /bin/app=prod",
        "name": "equals_in_values_parse",
        "source_test": "equals_in_values",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 2,
          "entries": [
            {
              "key": "key",
              "value": "value with spaces"
            },
            {
              "key": "other",
              "value": "normal"
            }
          ]
        },
        "features": [
          "whitespace"
        ],
        "functions": [
          "parse"
        ],
        "input": "  key   =    value with spaces   \nother = normal",
        "name": "whitespace_trimming_parse",
        "source_test": "whitespace_trimming",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 2,
          "entries": [
            {
              "key": "description",
              "value": "First line\n  Second line\n  Third line"
            },
            {
              "key": "done",
              "value": "yes"
            }
          ]
        },
        "features": [
          "multiline"
        ],
        "functions": [
          "parse"
        ],
        "input": "description = First line\n  Second line\n  Third line\ndone = yes",
        "name": "multiline_values_parse",
        "source_test": "multiline_values",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 2,
          "entries": [
            {
              "key": "empty",
              "value": ""
            },
            {
              "key": "other",
              "value": "value"
            }
          ]
        },
        "features": [
          "empty_keys"
        ],
        "functions": [
          "parse"
        ],
        "input": "empty =\nother = value",
        "name": "empty_values_parse",
        "source_test": "empty_values",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "database",
              "value": "\n  host = localhost\n  port = 5432"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "database =\n  host = localhost\n  port = 5432",
        "name": "nested_structure_parsing_parse",
        "source_test": "nested_structure_parsing",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 2,
          "entries": [
            {
              "key": "emoji",
              "value": "😀😃😄"
            },
            {
              "key": "配置",
              "value": "config"
            }
          ]
        },
        "features": [
          "unicode"
        ],
        "functions": [
          "parse"
        ],
        "input": "emoji = 😀😃😄\n配置 = config",
        "name": "unicode_parsing_parse",
        "source_test": "unicode_parsing",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 0
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "",
        "name": "empty_input_parse",
        "source_test": "empty_input",
        "validation": "parse",
        "variants": []
      }
    ],
    "file": "api_core_ccl_parsing.json"
  },
  {
    "name": "Edge Cases",
    "description": "Boundary conditions and edge cases",
    "tests": [
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "key",
              "value": "val"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "key=val",
        "name": "basic_single_no_spaces_parse",
        "source_test": "basic_single_no_spaces",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "key",
              "value": "val"
            }
          ]
        },
        "features": [
          "whitespace"
        ],
        "functions": [
          "parse"
        ],
        "input": "key = val",
        "name": "basic_with_spaces_parse",
        "source_test": "basic_with_spaces",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "key",
              "value": "val"
            }
          ]
        },
        "features": [
          "whitespace"
        ],
        "functions": [
          "parse_value"
        ],
        "input": "  key = val",
        "name": "indented_key_parse_value",
        "source_test": "indented_key",
        "validation": "parse_value",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "key",
              "value": "val"
            }
          ]
        },
        "features": [
          "whitespace"
        ],
        "functions": [
          "parse"
        ],
        "input": "key = val  ",
        "name": "value_trailing_spaces_parse",
        "source_test": "value_trailing_spaces",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "key",
              "value": "val"
            }
          ]
        },
        "features": [
          "whitespace"
        ],
        "functions": [
          "parse"
        ],
        "input": "  key  =  val  ",
        "name": "key_value_surrounded_spaces_parse",
        "source_test": "key_value_surrounded_spaces",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "key",
              "value": "val"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "\nkey = val\n",
        "name": "surrounded_by_newlines_parse",
        "source_test": "surrounded_by_newlines",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "key",
              "value": ""
            }
          ]
        },
        "features": [
          "empty_keys"
        ],
        "functions": [
          "parse"
        ],
        "input": "key =",
        "name": "key_empty_value_parse",
        "source_test": "key_empty_value",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "key",
              "value": ""
            }
          ]
        },
        "features": [
          "empty_keys"
        ],
        "functions": [
          "parse"
        ],
        "input": "key =\n",
        "name": "empty_value_with_newline_parse",
        "source_test": "empty_value_with_newline",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "key",
              "value": ""
            }
          ]
        },
        "features": [
          "empty_keys",
          "whitespace"
        ],
        "functions": [
          "parse"
        ],
        "input": "key =  ",
        "name": "empty_value_with_spaces_parse",
        "source_test": "empty_value_with_spaces",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "",
              "value": "val"
            }
          ]
        },
        "features": [
          "empty_keys"
        ],
        "functions": [
          "parse_value"
        ],
        "input": "  = val",
        "name": "empty_key_indented_parse_value",
        "source_test": "empty_key_indented",
        "validation": "parse_value",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "",
              "value": "val"
            }
          ]
        },
        "features": [
          "empty_keys"
        ],
        "functions": [
          "parse"
        ],
        "input": "\n  = val",
        "name": "empty_key_with_newline_parse",
        "source_test": "empty_key_with_newline",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "",
              "value": ""
            }
          ]
        },
        "features": [
          "empty_keys",
          "whitespace"
        ],
        "functions": [
          "parse"
        ],
        "input": "  =  ",
        "name": "empty_key_value_with_spaces_parse",
        "source_test": "empty_key_value_with_spaces",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "a",
              "value": "b=c"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "a=b=c",
        "name": "equals_in_value_no_spaces_parse",
        "source_test": "equals_in_value_no_spaces",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "a",
              "value": "b = c"
            }
          ]
        },
        "features": [
          "whitespace"
        ],
        "functions": [
          "parse"
        ],
        "input": "a = b = c",
        "name": "equals_in_value_with_spaces_parse",
        "source_test": "equals_in_value_with_spaces",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 2,
          "entries": [
            {
              "key": "key1",
              "value": "val1"
            },
            {
              "key": "key2",
              "value": "val2"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "key1 = val1\nkey2 = val2",
        "name": "multiple_key_value_pairs_parse",
        "source_test": "multiple_key_value_pairs",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [
          "tabs_preserve"
        ],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "key",
              "value": "\tvalue"
            }
          ]
        },
        "features": [
          "whitespace"
        ],
        "functions": [
          "parse"
        ],
        "input": "\tkey\t=\tvalue",
        "name": "key_with_tabs_parse",
        "source_test": "key_with_tabs",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [
          "tabs_preserve"
        ],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "key",
              "value": "value"
            }
          ]
        },
        "features": [
          "whitespace"
        ],
        "functions": [
          "parse"
        ],
        "input": "\tkey\t=\tvalue",
        "name": "key_with_tabs_ocaml_reference_parse",
        "source_test": "key_with_tabs_ocaml_reference",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "onlyspaces",
              "value": ""
            }
          ]
        },
        "features": [
          "empty_keys",
          "whitespace"
        ],
        "functions": [
          "parse"
        ],
        "input": "onlyspaces =     ",
        "name": "whitespace_only_value_parse",
        "source_test": "whitespace_only_value",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [
          "tabs_preserve"
        ],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "text",
              "value": "First\n    four spaces\n\ttab preserved"
            }
          ]
        },
        "features": [
          "whitespace"
        ],
        "functions": [
          "parse_value"
        ],
        "input": "text = First\n    four spaces\n\ttab preserved",
        "name": "spaces_vs_tabs_continuation_parse_value",
        "source_test": "spaces_vs_tabs_continuation",
        "validation": "parse_value",
        "variants": []
      },
      {
        "behaviors": [
          "tabs_preserve"
        ],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "text",
              "value": "First\n    four spaces\n tab preserved"
            }
          ]
        },
        "features": [
          "whitespace"
        ],
        "functions": [
          "parse_value"
        ],
        "input": "text = First\n    four spaces\n\ttab preserved",
        "name": "spaces_vs_tabs_continuation_ocaml_reference_parse_value",
        "source_test": "spaces_vs_tabs_continuation_ocaml_reference",
        "validation": "parse_value",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "",
              "value": "="
            }
          ]
        },
        "features": [
          "empty_keys",
          "whitespace"
        ],
        "functions": [
          "parse"
        ],
        "input": " =  = ",
        "name": "multiple_empty_equality_parse",
        "source_test": "multiple_empty_equality",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "key",
              "value": "val"
            }
          ]
        },
        "features": [
          "empty_keys",
          "whitespace"
        ],
        "functions": [
          "parse"
        ],
        "input": "key \n= val\n",
        "name": "key_with_newline_before_equals_parse",
        "source_test": "key_with_newline_before_equals",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "key",
              "value": "val"
            }
          ]
        },
        "features": [
          "empty_keys",
          "whitespace"
        ],
        "functions": [
          "parse"
        ],
        "input": "  \n key  \n=  val  \n",
        "name": "complex_multi_newline_whitespace_parse",
        "source_test": "complex_multi_newline_whitespace",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "key",
              "value": ""
            }
          ]
        },
        "features": [
          "empty_keys",
          "whitespace"
        ],
        "functions": [
          "parse"
        ],
        "input": "key =  \n",
        "name": "empty_value_with_trailing_spaces_newline_parse",
        "source_test": "empty_value_with_trailing_spaces_newline",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "",
              "value": ""
            }
          ]
        },
        "features": [
          "empty_keys",
          "whitespace"
        ],
        "functions": [
          "parse"
        ],
        "input": "\n  =  \n",
        "name": "empty_key_value_with_surrounding_newlines_parse",
        "source_test": "empty_key_value_with_surrounding_newlines",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "host",
              "value": "localhost"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "host = localhost",
        "name": "quotes_treated_as_literal_unquoted_parse",
        "source_test": "quotes_treated_as_literal_unquoted",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "host",
              "value": "\"localhost\""
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "host = \"localhost\"",
        "name": "quotes_treated_as_literal_quoted_parse",
        "source_test": "quotes_treated_as_literal_quoted",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "key",
              "value": "\n  val"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "key =\n  val",
        "name": "nested_single_line_parse",
        "source_test": "nested_single_line",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "key",
              "value": "\n  line1\n  line2"
            }
          ]
        },
        "features": [
          "multiline"
        ],
        "functions": [
          "parse"
        ],
        "input": "key =\n  line1\n  line2",
        "name": "nested_multi_line_parse",
        "source_test": "nested_multi_line",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "key",
              "value": "\n  line1\n\n  line2"
            }
          ]
        },
        "features": [
          "multiline"
        ],
        "functions": [
          "parse_value"
        ],
        "input": "key =\n  line1\n\n  line2",
        "name": "nested_with_blank_line_parse_value",
        "source_test": "nested_with_blank_line",
        "validation": "parse_value",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "key",
              "value": "\n  field1 = value1\n  field2 =\n    subfield = x\n    another = y"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse_value"
        ],
        "input": "key =\n  field1 = value1\n  field2 =\n    subfield = x\n    another = y",
        "name": "deep_nested_structure_parse_value",
        "source_test": "deep_nested_structure",
        "validation": "parse_value",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 4,
          "entries": [
            {
              "key": "name",
              "value": "Dmitrii Kovanikov"
            },
            {
              "key": "login",
              "value": "chshersh"
            },
            {
              "key": "language",
              "value": "OCaml"
            },
            {
              "key": "date",
              "value": "2024-05-25"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "name = Dmitrii Kovanikov\nlogin = chshersh\nlanguage = OCaml\ndate = 2024-05-25",
        "name": "realistic_stress_test_parse",
        "source_test": "realistic_stress_test",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 5,
          "entries": [
            {
              "key": "/",
              "value": "This is a CCL document"
            },
            {
              "key": "title",
              "value": "CCL Example"
            },
            {
              "key": "database",
              "value": "\n  enabled = true\n  ports =\n    = 8000\n    = 8001\n    = 8002\n  limits =\n    cpu = 1500mi\n    memory = 10Gb"
            },
            {
              "key": "user",
              "value": "\n  guestId = 42"
            },
            {
              "key": "user",
              "value": "\n  login = chshersh\n  createdAt = 2024-12-31"
            }
          ]
        },
        "features": [
          "comments",
          "empty_keys"
        ],
        "functions": [
          "parse"
        ],
        "input": "/= This is a CCL document\ntitle = CCL Example\n\ndatabase =\n  enabled = true\n  ports =\n    = 8000\n    = 8001\n    = 8002\n  limits =\n    cpu = 1500mi\n    memory = 10Gb\n\nuser =\n  guestId = 42\n\nuser =\n  login = chshersh\n  createdAt = 2024-12-31",
        "name": "ocaml_stress_test_original_parse",
        "source_test": "ocaml_stress_test_original",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "/": "This is a CCL document",
            "database": {
              "enabled": "true",
              "limits": {
                "cpu": "1500mi",
                "memory": "10Gb"
              },
              "ports": {
                "": [
                  "8000",
                  "8001",
                  "8002"
                ]
              }
            },
            "title": "CCL Example",
            "user": {
              "createdAt": "2024-12-31",
              "guestId": "42",
              "login": "chshersh"
            }
          }
        },
        "features": [
          "comments",
          "empty_keys"
        ],
        "functions": [
          "build_hierarchy"
        ],
        "input": "/= This is a CCL document\ntitle = CCL Example\n\ndatabase =\n  enabled = true\n  ports =\n    = 8000\n    = 8001\n    = 8002\n  limits =\n    cpu = 1500mi\n    memory = 10Gb\n\nuser =\n  guestId = 42\n\nuser =\n  login = chshersh\n  createdAt = 2024-12-31",
        "name": "ocaml_stress_test_original_build_hierarchy",
        "source_test": "ocaml_stress_test_original",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "args": [
          "title"
        ],
        "behaviors": [],
        "expected": {
          "count": 1,
          "value": "CCL Example"
        },
        "features": [
          "comments",
          "empty_keys"
        ],
        "functions": [
          "get_string"
        ],
        "input": "/= This is a CCL document\ntitle = CCL Example\n\ndatabase =\n  enabled = true\n  ports =\n    = 8000\n    = 8001\n    = 8002\n  limits =\n    cpu = 1500mi\n    memory = 10Gb\n\nuser =\n  guestId = 42\n\nuser =\n  login = chshersh\n  createdAt = 2024-12-31",
        "name": "ocaml_stress_test_original_get_string",
        "source_test": "ocaml_stress_test_original",
        "validation": "get_string",
        "variants": []
      }
    ],
    "file": "api_edge_cases.json"
  },
  {
    "name": "Error Handling",
    "description": "Error handling and validation",
    "tests": [
      {
        "behaviors": [],
        "expected": {
          "count": 0
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "key",
        "name": "just_key_error_parse",
        "source_test": "just_key_error",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 0
        },
        "features": [
          "whitespace"
        ],
        "functions": [
          "parse"
        ],
        "input": "   ",
        "name": "whitespace_only_error_parse",
        "source_test": "whitespace_only_error",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 0
        },
        "features": [
          "whitespace"
        ],
        "functions": [
          "parse"
        ],
        "input": "   ",
        "name": "whitespace_only_error_ocaml_reference_parse",
        "source_test": "whitespace_only_error_ocaml_reference",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 0
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "val",
        "name": "just_string_error_parse",
        "source_test": "just_string_error",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 0
        },
        "features": [
          "multiline"
        ],
        "functions": [
          "parse"
        ],
        "input": "val\n  next",
        "name": "multiline_plain_error_parse",
        "source_test": "multiline_plain_error",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 0
        },
        "features": [
          "multiline"
        ],
        "functions": [
          "parse"
        ],
        "input": "\nval\n  next",
        "name": "multiline_plain_nested_error_parse",
        "source_test": "multiline_plain_nested_error",
        "validation": "parse",
        "variants": []
      }
    ],
    "file": "api_errors.json"
  },
  {
    "name": "List Operations",
    "description": "List-specific operations and coercion",
    "tests": [
      {
        "behaviors": [],
        "expected": {
          "count": 3,
          "entries": [
            {
              "key": "servers",
              "value": "web1"
            },
            {
              "key": "servers",
              "value": "web2"
            },
            {
              "key": "servers",
              "value": "web3"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "servers = web1\nservers = web2\nservers = web3",
        "name": "basic_list_from_duplicates_parse",
        "source_test": "basic_list_from_duplicates",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "servers": [
              "web1",
              "web2",
              "web3"
            ]
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "servers = web1\nservers = web2\nservers = web3",
        "name": "basic_list_from_duplicates_build_hierarchy",
        "source_test": "basic_list_from_duplicates",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "args": [
          "servers"
        ],
        "behaviors": [],
        "expected": {
          "count": 3,
          "list": [
            "web1",
            "web2",
            "web3"
          ]
        },
        "features": [],
        "functions": [
          "get_list"
        ],
        "input": "servers = web1\nservers = web2\nservers = web3",
        "name": "basic_list_from_duplicates_get_list",
        "source_test": "basic_list_from_duplicates",
        "validation": "get_list",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 20,
          "entries": [
            {
              "key": "items",
              "value": "item01"
            },
            {
              "key": "items",
              "value": "item02"
            },
            {
              "key": "items",
              "value": "item03"
            },
            {
              "key": "items",
              "value": "item04"
            },
            {
              "key": "items",
              "value": "item05"
            },
            {
              "key": "items",
              "value": "item06"
            },
            {
              "key": "items",
              "value": "item07"
            },
            {
              "key": "items",
              "value": "item08"
            },
            {
              "key": "items",
              "value": "item09"
            },
            {
              "key": "items",
              "value": "item10"
            },
            {
              "key": "items",
              "value": "item11"
            },
            {
              "key": "items",
              "value": "item12"
            },
            {
              "key": "items",
              "value": "item13"
            },
            {
              "key": "items",
              "value": "item14"
            },
            {
              "key": "items",
              "value": "item15"
            },
            {
              "key": "items",
              "value": "item16"
            },
            {
              "key": "items",
              "value": "item17"
            },
            {
              "key": "items",
              "value": "item18"
            },
            {
              "key": "items",
              "value": "item19"
            },
            {
              "key": "items",
              "value": "item20"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "items = item01\nitems = item02\nitems = item03\nitems = item04\nitems = item05\nitems = item06\nitems = item07\nitems = item08\nitems = item09\nitems = item10\nitems = item11\nitems = item12\nitems = item13\nitems = item14\nitems = item15\nitems = item16\nitems = item17\nitems = item18\nitems = item19\nitems = item20",
        "name": "large_list_parse",
        "source_test": "large_list",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "items": [
              "item01",
              "item02",
              "item03",
              "item04",
              "item05",
              "item06",
              "item07",
              "item08",
              "item09",
              "item10",
              "item11",
              "item12",
              "item13",
              "item14",
              "item15",
              "item16",
              "item17",
              "item18",
              "item19",
              "item20"
            ]
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "items = item01\nitems = item02\nitems = item03\nitems = item04\nitems = item05\nitems = item06\nitems = item07\nitems = item08\nitems = item09\nitems = item10\nitems = item11\nitems = item12\nitems = item13\nitems = item14\nitems = item15\nitems = item16\nitems = item17\nitems = item18\nitems = item19\nitems = item20",
        "name": "large_list_build_hierarchy",
        "source_test": "large_list",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "args": [
          "items"
        ],
        "behaviors": [],
        "expected": {
          "count": 20,
          "list": [
            "item01",
            "item02",
            "item03",
            "item04",
            "item05",
            "item06",
            "item07",
            "item08",
            "item09",
            "item10",
            "item11",
            "item12",
            "item13",
            "item14",
            "item15",
            "item16",
            "item17",
            "item18",
            "item19",
            "item20"
          ]
        },
        "features": [],
        "functions": [
          "get_list"
        ],
        "input": "items = item01\nitems = item02\nitems = item03\nitems = item04\nitems = item05\nitems = item06\nitems = item07\nitems = item08\nitems = item09\nitems = item10\nitems = item11\nitems = item12\nitems = item13\nitems = item14\nitems = item15\nitems = item16\nitems = item17\nitems = item18\nitems = item19\nitems = item20",
        "name": "large_list_get_list",
        "source_test": "large_list",
        "validation": "get_list",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 5,
          "entries": [
            {
              "key": "servers",
              "value": "web1"
            },
            {
              "key": "/",
              "value": "Production servers"
            },
            {
              "key": "servers",
              "value": "web2"
            },
            {
              "key": "servers",
              "value": "web3"
            },
            {
              "key": "/",
              "value": "End of list"
            }
          ]
        },
        "features": [
          "comments"
        ],
        "functions": [
          "parse"
        ],
        "input": "servers = web1\n/= Production servers\nservers = web2\nservers = web3\n/= End of list",
        "name": "list_with_comments_parse",
        "source_test": "list_with_comments",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "/": [
              "Production servers",
              "End of list"
            ],
            "servers": [
              "web1",
              "web2",
              "web3"
            ]
          }
        },
        "features": [
          "comments"
        ],
        "functions": [
          "build_hierarchy"
        ],
        "input": "servers = web1\n/= Production servers\nservers = web2\nservers = web3\n/= End of list",
        "name": "list_with_comments_build_hierarchy",
        "source_test": "list_with_comments",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "args": [
          "servers"
        ],
        "behaviors": [],
        "expected": {
          "count": 3,
          "list": [
            "web1",
            "web2",
            "web3"
          ]
        },
        "features": [
          "comments"
        ],
        "functions": [
          "get_list"
        ],
        "input": "servers = web1\n/= Production servers\nservers = web2\nservers = web3\n/= End of list",
        "name": "list_with_comments_get_list",
        "source_test": "list_with_comments",
        "validation": "get_list",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "existing",
              "value": "value"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "existing = value",
        "name": "list_error_missing_key_parse",
        "source_test": "list_error_missing_key",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "existing": "value"
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "existing = value",
        "name": "list_error_missing_key_build_hierarchy",
        "source_test": "list_error_missing_key",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "args": [
          "missing"
        ],
        "behaviors": [],
        "expected": {
          "count": 0
        },
        "features": [],
        "functions": [
          "get_list"
        ],
        "input": "existing = value",
        "name": "list_error_missing_key_get_list",
        "source_test": "list_error_missing_key",
        "validation": "get_list",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "config",
              "value": "\n  server = web1"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "config =\n  server = web1",
        "name": "list_error_nested_missing_key_parse",
        "source_test": "list_error_nested_missing_key",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "config": {
              "server": "web1"
            }
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "config =\n  server = web1",
        "name": "list_error_nested_missing_key_build_hierarchy",
        "source_test": "list_error_nested_missing_key",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "args": [
          "config",
          "missing"
        ],
        "behaviors": [],
        "expected": {
          "count": 0
        },
        "features": [],
        "functions": [
          "get_list"
        ],
        "input": "config =\n  server = web1",
        "name": "list_error_nested_missing_key_get_list",
        "source_test": "list_error_nested_missing_key",
        "validation": "get_list",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "value",
              "value": "simple"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "value = simple",
        "name": "list_error_non_object_path_parse",
        "source_test": "list_error_non_object_path",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "value": "simple"
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "value = simple",
        "name": "list_error_non_object_path_build_hierarchy",
        "source_test": "list_error_non_object_path",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "args": [
          "value",
          "nested"
        ],
        "behaviors": [],
        "expected": {
          "count": 0
        },
        "features": [],
        "functions": [
          "get_list"
        ],
        "input": "value = simple",
        "name": "list_error_non_object_path_get_list",
        "source_test": "list_error_non_object_path",
        "validation": "get_list",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 0
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "",
        "name": "list_edge_case_zero_length_parse",
        "source_test": "list_edge_case_zero_length",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {}
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "",
        "name": "list_edge_case_zero_length_build_hierarchy",
        "source_test": "list_edge_case_zero_length",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "args": [
          "nonexistent"
        ],
        "behaviors": [],
        "expected": {
          "count": 0
        },
        "features": [],
        "functions": [
          "get_list"
        ],
        "input": "",
        "name": "list_edge_case_zero_length_get_list",
        "source_test": "list_edge_case_zero_length",
        "validation": "get_list",
        "variants": []
      }
    ],
    "file": "api_list_access.json"
  },
  {
    "name": "Proposed Behavior",
    "description": "proposed behavior functionality",
    "tests": [
      {
        "behaviors": [],
        "expected": {
          "count": 2,
          "entries": [
            {
              "key": "",
              "value": "= Section Header =\n  This continues the header"
            },
            {
              "key": "key",
              "value": "value"
            }
          ]
        },
        "features": [
          "empty_keys",
          "multiline"
        ],
        "functions": [
          "parse_value"
        ],
        "input": "== Section Header =\n  This continues the header\nkey = value",
        "name": "multiline_section_header_value_parse_value",
        "source_test": "multiline_section_header_value",
        "validation": "parse_value",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 2,
          "entries": [
            {
              "key": "",
              "value": "= Section Header =\nThis continues the header"
            },
            {
              "key": "key",
              "value": "value"
            }
          ]
        },
        "features": [
          "empty_keys"
        ],
        "functions": [
          "parse_value"
        ],
        "input": "== Section Header =\nThis continues the header\nkey = value",
        "name": "unindented_multiline_becomes_continuation_parse_value",
        "source_test": "unindented_multiline_becomes_continuation",
        "validation": "parse_value",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [
          "list_coercion_enabled"
        ],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "item",
              "value": "single"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "item = single",
        "name": "single_item_as_list_parse",
        "source_test": "single_item_as_list",
        "validation": "parse",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [
          "list_coercion_enabled"
        ],
        "expected": {
          "count": 1,
          "object": {
            "item": "single"
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "item = single",
        "name": "single_item_as_list_build_hierarchy",
        "source_test": "single_item_as_list",
        "validation": "build_hierarchy",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "args": [
          "item"
        ],
        "behaviors": [
          "list_coercion_enabled"
        ],
        "expected": {
          "count": 1,
          "list": [
            "single"
          ]
        },
        "features": [],
        "functions": [
          "get_list"
        ],
        "input": "item = single",
        "name": "single_item_as_list_get_list",
        "source_test": "single_item_as_list",
        "validation": "get_list",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [
          "list_coercion_enabled"
        ],
        "expected": {
          "count": 3,
          "entries": [
            {
              "key": "ports",
              "value": "80"
            },
            {
              "key": "ports",
              "value": "443"
            },
            {
              "key": "host",
              "value": "localhost"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "ports = 80\nports = 443\nhost = localhost",
        "name": "mixed_duplicate_single_keys_parse",
        "source_test": "mixed_duplicate_single_keys",
        "validation": "parse",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [
          "list_coercion_enabled"
        ],
        "expected": {
          "count": 1,
          "object": {
            "host": "localhost",
            "ports": [
              "80",
              "443"
            ]
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "ports = 80\nports = 443\nhost = localhost",
        "name": "mixed_duplicate_single_keys_build_hierarchy",
        "source_test": "mixed_duplicate_single_keys",
        "validation": "build_hierarchy",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "args": [
          "host"
        ],
        "behaviors": [
          "list_coercion_enabled"
        ],
        "expected": {
          "count": 1,
          "list": [
            "localhost"
          ]
        },
        "features": [],
        "functions": [
          "get_list"
        ],
        "input": "ports = 80\nports = 443\nhost = localhost",
        "name": "mixed_duplicate_single_keys_get_list",
        "source_test": "mixed_duplicate_single_keys",
        "validation": "get_list",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [
          "list_coercion_enabled"
        ],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "database",
              "value": "\n  hosts = primary\n  hosts = secondary\n  port = 5432"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "database =\n  hosts = primary\n  hosts = secondary\n  port = 5432",
        "name": "nested_list_access_parse",
        "source_test": "nested_list_access",
        "validation": "parse",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [
          "list_coercion_enabled"
        ],
        "expected": {
          "count": 1,
          "object": {
            "database": {
              "hosts": [
                "primary",
                "secondary"
              ],
              "port": "5432"
            }
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "database =\n  hosts = primary\n  hosts = secondary\n  port = 5432",
        "name": "nested_list_access_build_hierarchy",
        "source_test": "nested_list_access",
        "validation": "build_hierarchy",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "args": [
          "database",
          "port"
        ],
        "behaviors": [
          "list_coercion_enabled"
        ],
        "expected": {
          "count": 1,
          "list": [
            "5432"
          ]
        },
        "features": [],
        "functions": [
          "get_list"
        ],
        "input": "database =\n  hosts = primary\n  hosts = secondary\n  port = 5432",
        "name": "nested_list_access_get_list",
        "source_test": "nested_list_access",
        "validation": "get_list",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "empty_list",
              "value": ""
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "empty_list =",
        "name": "empty_list_parse",
        "source_test": "empty_list",
        "validation": "parse",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "empty_list": ""
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "empty_list =",
        "name": "empty_list_build_hierarchy",
        "source_test": "empty_list",
        "validation": "build_hierarchy",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "args": [
          "empty_list"
        ],
        "behaviors": [],
        "expected": {
          "count": 1,
          "list": [
            ""
          ]
        },
        "features": [],
        "functions": [
          "get_list"
        ],
        "input": "empty_list =",
        "name": "empty_list_get_list",
        "source_test": "empty_list",
        "validation": "get_list",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 4,
          "entries": [
            {
              "key": "numbers",
              "value": "1"
            },
            {
              "key": "numbers",
              "value": "42"
            },
            {
              "key": "numbers",
              "value": "-17"
            },
            {
              "key": "numbers",
              "value": "0"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "numbers = 1\nnumbers = 42\nnumbers = -17\nnumbers = 0",
        "name": "list_with_numbers_parse",
        "source_test": "list_with_numbers",
        "validation": "parse",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "numbers": [
              "1",
              "42",
              "-17",
              "0"
            ]
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "numbers = 1\nnumbers = 42\nnumbers = -17\nnumbers = 0",
        "name": "list_with_numbers_build_hierarchy",
        "source_test": "list_with_numbers",
        "validation": "build_hierarchy",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "args": [
          "numbers"
        ],
        "behaviors": [],
        "expected": {
          "count": 4,
          "list": [
            "1",
            "42",
            "-17",
            "0"
          ]
        },
        "features": [],
        "functions": [
          "get_list"
        ],
        "input": "numbers = 1\nnumbers = 42\nnumbers = -17\nnumbers = 0",
        "name": "list_with_numbers_get_list",
        "source_test": "list_with_numbers",
        "validation": "get_list",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 4,
          "entries": [
            {
              "key": "flags",
              "value": "true"
            },
            {
              "key": "flags",
              "value": "false"
            },
            {
              "key": "flags",
              "value": "yes"
            },
            {
              "key": "flags",
              "value": "no"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "flags = true\nflags = false\nflags = yes\nflags = no",
        "name": "list_with_booleans_parse",
        "source_test": "list_with_booleans",
        "validation": "parse",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "flags": [
              "true",
              "false",
              "yes",
              "no"
            ]
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "flags = true\nflags = false\nflags = yes\nflags = no",
        "name": "list_with_booleans_build_hierarchy",
        "source_test": "list_with_booleans",
        "validation": "build_hierarchy",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "args": [
          "flags"
        ],
        "behaviors": [],
        "expected": {
          "count": 4,
          "list": [
            "true",
            "false",
            "yes",
            "no"
          ]
        },
        "features": [],
        "functions": [
          "get_list"
        ],
        "input": "flags = true\nflags = false\nflags = yes\nflags = no",
        "name": "list_with_booleans_get_list",
        "source_test": "list_with_booleans",
        "validation": "get_list",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 4,
          "entries": [
            {
              "key": "items",
              "value": "spaced"
            },
            {
              "key": "items",
              "value": "normal"
            },
            {
              "key": "items",
              "value": ""
            },
            {
              "key": "items",
              "value": ""
            }
          ]
        },
        "features": [
          "whitespace"
        ],
        "functions": [
          "parse"
        ],
        "input": "items =   spaced   \nitems = normal\nitems =\nitems =   ",
        "name": "list_with_whitespace_parse",
        "source_test": "list_with_whitespace",
        "validation": "parse",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "items": [
              "spaced",
              "normal",
              "",
              ""
            ]
          }
        },
        "features": [
          "whitespace"
        ],
        "functions": [
          "build_hierarchy"
        ],
        "input": "items =   spaced   \nitems = normal\nitems =\nitems =   ",
        "name": "list_with_whitespace_build_hierarchy",
        "source_test": "list_with_whitespace",
        "validation": "build_hierarchy",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "args": [
          "items"
        ],
        "behaviors": [],
        "expected": {
          "count": 4,
          "list": [
            "spaced",
            "normal",
            "",
            ""
          ]
        },
        "features": [
          "whitespace"
        ],
        "functions": [
          "get_list"
        ],
        "input": "items =   spaced   \nitems = normal\nitems =\nitems =   ",
        "name": "list_with_whitespace_get_list",
        "source_test": "list_with_whitespace",
        "validation": "get_list",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 6,
          "entries": [
            {
              "key": "config",
              "value": ""
            },
            {
              "key": "environments",
              "value": ""
            },
            {
              "key": "production",
              "value": ""
            },
            {
              "key": "servers",
              "value": "web1"
            },
            {
              "key": "servers",
              "value": "web2"
            },
            {
              "key": "servers",
              "value": "api1"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "config =\n  environments =\n    production =\n      servers = web1\n      servers = web2\n      servers = api1",
        "name": "deeply_nested_list_parse",
        "source_test": "deeply_nested_list",
        "validation": "parse",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "config": {
              "environments": {
                "production": {
                  "servers": [
                    "web1",
                    "web2",
                    "api1"
                  ]
                }
              }
            }
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "config =\n  environments =\n    production =\n      servers = web1\n      servers = web2\n      servers = api1",
        "name": "deeply_nested_list_build_hierarchy",
        "source_test": "deeply_nested_list",
        "validation": "build_hierarchy",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "args": [
          "config",
          "environments",
          "production",
          "servers"
        ],
        "behaviors": [],
        "expected": {
          "count": 3,
          "list": [
            "web1",
            "web2",
            "api1"
          ]
        },
        "features": [],
        "functions": [
          "get_list"
        ],
        "input": "config =\n  environments =\n    production =\n      servers = web1\n      servers = web2\n      servers = api1",
        "name": "deeply_nested_list_get_list",
        "source_test": "deeply_nested_list",
        "validation": "get_list",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 4,
          "entries": [
            {
              "key": "names",
              "value": "张三"
            },
            {
              "key": "names",
              "value": "José"
            },
            {
              "key": "names",
              "value": "François"
            },
            {
              "key": "names",
              "value": "العربية"
            }
          ]
        },
        "features": [
          "unicode"
        ],
        "functions": [
          "parse"
        ],
        "input": "names = 张三\nnames = José\nnames = François\nnames = العربية",
        "name": "list_with_unicode_parse",
        "source_test": "list_with_unicode",
        "validation": "parse",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "names": [
              "张三",
              "José",
              "François",
              "العربية"
            ]
          }
        },
        "features": [
          "unicode"
        ],
        "functions": [
          "build_hierarchy"
        ],
        "input": "names = 张三\nnames = José\nnames = François\nnames = العربية",
        "name": "list_with_unicode_build_hierarchy",
        "source_test": "list_with_unicode",
        "validation": "build_hierarchy",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "args": [
          "names"
        ],
        "behaviors": [],
        "expected": {
          "count": 4,
          "list": [
            "张三",
            "José",
            "François",
            "العربية"
          ]
        },
        "features": [
          "unicode"
        ],
        "functions": [
          "get_list"
        ],
        "input": "names = 张三\nnames = José\nnames = François\nnames = العربية",
        "name": "list_with_unicode_get_list",
        "source_test": "list_with_unicode",
        "validation": "get_list",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 4,
          "entries": [
            {
              "key": "symbols",
              "value": "@#$%"
            },
            {
              "key": "symbols",
              "value": "!^&*()"
            },
            {
              "key": "symbols",
              "value": "[]{}|"
            },
            {
              "key": "symbols",
              "value": "<>=+"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "symbols = @#$%\nsymbols = !^&*()\nsymbols = []{}|\nsymbols = <>=+",
        "name": "list_with_special_characters_parse",
        "source_test": "list_with_special_characters",
        "validation": "parse",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "symbols": [
              "@#$%",
              "!^&*()",
              "[]{}|",
              "<>=+"
            ]
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "symbols = @#$%\nsymbols = !^&*()\nsymbols = []{}|\nsymbols = <>=+",
        "name": "list_with_special_characters_build_hierarchy",
        "source_test": "list_with_special_characters",
        "validation": "build_hierarchy",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "args": [
          "symbols"
        ],
        "behaviors": [],
        "expected": {
          "count": 4,
          "list": [
            "@#$%",
            "!^&*()",
            "[]{}|",
            "<>=+"
          ]
        },
        "features": [],
        "functions": [
          "get_list"
        ],
        "input": "symbols = @#$%\nsymbols = !^&*()\nsymbols = []{}|\nsymbols = <>=+",
        "name": "list_with_special_characters_get_list",
        "source_test": "list_with_special_characters",
        "validation": "get_list",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 4,
          "entries": [
            {
              "key": "descriptions",
              "value": "First line"
            },
            {
              "key": "second line",
              "value": ""
            },
            {
              "key": "descriptions",
              "value": "Another item"
            },
            {
              "key": "descriptions",
              "value": "Third item"
            }
          ]
        },
        "features": [
          "multiline"
        ],
        "functions": [
          "parse_value"
        ],
        "input": "descriptions = First line\nsecond line\ndescriptions = Another item\ndescriptions = Third item",
        "name": "list_multiline_values_parse_value",
        "source_test": "list_multiline_values",
        "validation": "parse_value",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "descriptions": [
              "First line",
              "Another item",
              "Third item"
            ],
            "second line": ""
          }
        },
        "features": [
          "multiline"
        ],
        "functions": [
          "build_hierarchy"
        ],
        "input": "descriptions = First line\nsecond line\ndescriptions = Another item\ndescriptions = Third item",
        "name": "list_multiline_values_build_hierarchy",
        "source_test": "list_multiline_values",
        "validation": "build_hierarchy",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "args": [
          "descriptions"
        ],
        "behaviors": [],
        "expected": {
          "count": 3,
          "list": [
            "First line",
            "Another item",
            "Third item"
          ]
        },
        "features": [
          "multiline"
        ],
        "functions": [
          "get_list"
        ],
        "input": "descriptions = First line\nsecond line\ndescriptions = Another item\ndescriptions = Third item",
        "name": "list_multiline_values_get_list",
        "source_test": "list_multiline_values",
        "validation": "get_list",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [
          "list_coercion_enabled"
        ],
        "expected": {
          "count": 11,
          "entries": [
            {
              "key": "config",
              "value": ""
            },
            {
              "key": "servers",
              "value": "web1"
            },
            {
              "key": "servers",
              "value": "web2"
            },
            {
              "key": "database",
              "value": ""
            },
            {
              "key": "hosts",
              "value": "primary"
            },
            {
              "key": "hosts",
              "value": "backup"
            },
            {
              "key": "port",
              "value": "5432"
            },
            {
              "key": "cache",
              "value": "redis"
            },
            {
              "key": "features",
              "value": "auth"
            },
            {
              "key": "features",
              "value": "api"
            },
            {
              "key": "features",
              "value": "ui"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse_value"
        ],
        "input": "config =\n  servers = web1\n  servers = web2\n  database =\n    hosts = primary\n    hosts = backup\n    port = 5432\n  cache = redis\nfeatures = auth\nfeatures = api\nfeatures = ui",
        "name": "complex_mixed_list_scenarios_parse_value",
        "source_test": "complex_mixed_list_scenarios",
        "validation": "parse_value",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [
          "list_coercion_enabled"
        ],
        "expected": {
          "count": 1,
          "object": {
            "config": {
              "cache": "redis",
              "database": {
                "hosts": [
                  "primary",
                  "backup"
                ],
                "port": "5432"
              },
              "servers": [
                "web1",
                "web2"
              ]
            },
            "features": [
              "auth",
              "api",
              "ui"
            ]
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "config =\n  servers = web1\n  servers = web2\n  database =\n    hosts = primary\n    hosts = backup\n    port = 5432\n  cache = redis\nfeatures = auth\nfeatures = api\nfeatures = ui",
        "name": "complex_mixed_list_scenarios_build_hierarchy",
        "source_test": "complex_mixed_list_scenarios",
        "validation": "build_hierarchy",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "args": [
          "features"
        ],
        "behaviors": [
          "list_coercion_enabled"
        ],
        "expected": {
          "count": 3,
          "list": [
            "auth",
            "api",
            "ui"
          ]
        },
        "features": [],
        "functions": [
          "get_list"
        ],
        "input": "config =\n  servers = web1\n  servers = web2\n  database =\n    hosts = primary\n    hosts = backup\n    port = 5432\n  cache = redis\nfeatures = auth\nfeatures = api\nfeatures = ui",
        "name": "complex_mixed_list_scenarios_get_list",
        "source_test": "complex_mixed_list_scenarios",
        "validation": "get_list",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [
          "list_coercion_enabled"
        ],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "safe",
              "value": "value"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "safe = value",
        "name": "list_path_traversal_protection_parse",
        "source_test": "list_path_traversal_protection",
        "validation": "parse",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [
          "list_coercion_enabled"
        ],
        "expected": {
          "count": 1,
          "object": {
            "safe": "value"
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "safe = value",
        "name": "list_path_traversal_protection_build_hierarchy",
        "source_test": "list_path_traversal_protection",
        "validation": "build_hierarchy",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "args": [
          "safe"
        ],
        "behaviors": [
          "list_coercion_enabled"
        ],
        "expected": {
          "count": 1,
          "list": [
            "value"
          ]
        },
        "features": [],
        "functions": [
          "get_list"
        ],
        "input": "safe = value",
        "name": "list_path_traversal_protection_get_list",
        "source_test": "list_path_traversal_protection",
        "validation": "get_list",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "empty_key",
              "value": ""
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "empty_key =",
        "name": "parse_empty_value_parse",
        "source_test": "parse_empty_value",
        "validation": "parse",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "empty_key": ""
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "empty_key =",
        "name": "parse_empty_value_build_hierarchy",
        "source_test": "parse_empty_value",
        "validation": "build_hierarchy",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "args": [
          "empty_key"
        ],
        "behaviors": [],
        "expected": {
          "count": 1,
          "value": ""
        },
        "features": [],
        "functions": [
          "get_string"
        ],
        "input": "empty_key =",
        "name": "parse_empty_value_get_string",
        "source_test": "parse_empty_value",
        "validation": "get_string",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "empty_key",
              "value": ""
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "empty_key =",
        "name": "canonical_format_empty_values_parse",
        "source_test": "canonical_format_empty_values",
        "validation": "parse",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "value": "empty_key ="
        },
        "features": [],
        "functions": [
          "canonical_format"
        ],
        "input": "empty_key =",
        "name": "canonical_format_empty_values_canonical_format",
        "source_test": "canonical_format_empty_values",
        "validation": "canonical_format",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [
          "tabs_preserve"
        ],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "value_with_tabs",
              "value": "text\t\twith\ttabs\t"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "value_with_tabs = text\t\twith\ttabs\t",
        "name": "canonical_format_tab_preservation_parse",
        "source_test": "canonical_format_tab_preservation",
        "validation": "parse",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [
          "tabs_preserve"
        ],
        "expected": {
          "count": 1,
          "value": "value_with_tabs = text\t\twith\ttabs"
        },
        "features": [],
        "functions": [
          "canonical_format"
        ],
        "input": "value_with_tabs = text\t\twith\ttabs\t",
        "name": "canonical_format_tab_preservation_canonical_format",
        "source_test": "canonical_format_tab_preservation",
        "validation": "canonical_format",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 2,
          "entries": [
            {
              "key": "unicode",
              "value": "你好世界"
            },
            {
              "key": "emo",
              "value": "🌟✨"
            }
          ]
        },
        "features": [
          "unicode"
        ],
        "functions": [
          "parse"
        ],
        "input": "unicode = 你好世界\nemo = 🌟✨",
        "name": "canonical_format_unicode_parse",
        "source_test": "canonical_format_unicode",
        "validation": "parse",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "value": "unicode = 你好世界\nemo = 🌟✨"
        },
        "features": [
          "unicode"
        ],
        "functions": [
          "canonical_format"
        ],
        "input": "unicode = 你好世界\nemo = 🌟✨",
        "name": "canonical_format_unicode_canonical_format",
        "source_test": "canonical_format_unicode",
        "validation": "canonical_format",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [
          "crlf_preserve_literal"
        ],
        "expected": {
          "count": 2,
          "entries": [
            {
              "key": "key1",
              "value": "value1"
            },
            {
              "key": "key2",
              "value": "value2"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "key1 = value1\r\nkey2 = value2\r\n",
        "name": "canonical_format_line_endings_proposed_parse",
        "source_test": "canonical_format_line_endings_proposed",
        "validation": "parse",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [
          "crlf_preserve_literal"
        ],
        "expected": {
          "count": 1,
          "value": "key1 = value1\nkey2 = value2"
        },
        "features": [],
        "functions": [
          "canonical_format"
        ],
        "input": "key1 = value1\r\nkey2 = value2\r\n",
        "name": "canonical_format_line_endings_proposed_canonical_format",
        "source_test": "canonical_format_line_endings_proposed",
        "validation": "canonical_format",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [
          "crlf_normalize_to_lf"
        ],
        "expected": {
          "count": 2,
          "entries": [
            {
              "key": "key1",
              "value": "value1"
            },
            {
              "key": "key2",
              "value": "value2"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "key1 = value1\r\nkey2 = value2\r\n",
        "name": "crlf_normalize_to_lf_proposed_parse",
        "source_test": "crlf_normalize_to_lf_proposed",
        "validation": "parse",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [
          "crlf_normalize_to_lf"
        ],
        "expected": {
          "count": 1,
          "value": "key1 = value1\nkey2 = value2"
        },
        "features": [],
        "functions": [
          "canonical_format"
        ],
        "input": "key1 = value1\r\nkey2 = value2\r\n",
        "name": "crlf_normalize_to_lf_proposed_canonical_format",
        "source_test": "crlf_normalize_to_lf_proposed",
        "validation": "canonical_format",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [
          "crlf_normalize_to_lf"
        ],
        "expected": {
          "count": 2,
          "entries": [
            {
              "key": "key1",
              "value": "value1"
            },
            {
              "key": "key2",
              "value": "value2"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "key1 = value1\r\nkey2 = value2\r\n",
        "name": "crlf_normalize_to_lf_indented_proposed_parse",
        "source_test": "crlf_normalize_to_lf_indented_proposed",
        "validation": "parse",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [
          "crlf_normalize_to_lf"
        ],
        "expected": {
          "count": 1,
          "value": "key1 =\n  value1 =\nkey2 =\n  value2 =\n"
        },
        "features": [],
        "functions": [
          "canonical_format"
        ],
        "input": "key1 = value1\r\nkey2 = value2\r\n",
        "name": "crlf_normalize_to_lf_indented_proposed_canonical_format",
        "source_test": "crlf_normalize_to_lf_indented_proposed",
        "validation": "canonical_format",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [
          "strict_spacing"
        ],
        "expected": {
          "count": 3,
          "entries": [
            {
              "key": "key1",
              "value": "value1"
            },
            {
              "key": "key2",
              "value": "value2"
            },
            {
              "key": "key3",
              "value": "\tvalue3"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "key1=value1\nkey2  =  value2\nkey3\t=\tvalue3",
        "name": "canonical_format_consistent_spacing_parse",
        "source_test": "canonical_format_consistent_spacing",
        "validation": "parse",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [
          "strict_spacing"
        ],
        "expected": {
          "count": 1,
          "value": "key1 = value1\nkey2 = value2\nkey3 = \tvalue3"
        },
        "features": [],
        "functions": [
          "canonical_format"
        ],
        "input": "key1=value1\nkey2  =  value2\nkey3\t=\tvalue3",
        "name": "canonical_format_consistent_spacing_canonical_format",
        "source_test": "canonical_format_consistent_spacing",
        "validation": "canonical_format",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 3,
          "entries": [
            {
              "key": "z",
              "value": "last"
            },
            {
              "key": "a",
              "value": "first"
            },
            {
              "key": "m",
              "value": "middle"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "z = last\na = first\nm = middle",
        "name": "deterministic_output_parse",
        "source_test": "deterministic_output",
        "validation": "parse",
        "variants": [
          "proposed_behavior"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "value": "z = last\na = first\nm = middle"
        },
        "features": [],
        "functions": [
          "canonical_format"
        ],
        "input": "z = last\na = first\nm = middle",
        "name": "deterministic_output_canonical_format",
        "source_test": "deterministic_output",
        "validation": "canonical_format",
        "variants": [
          "proposed_behavior"
        ]
      }
    ],
    "file": "api_proposed_behavior.json"
  },
  {
    "name": "Reference Compliant",
    "description": "reference compliant functionality",
    "tests": [
      {
        "behaviors": [
          "list_coercion_disabled"
        ],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "item",
              "value": "single"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "item = single",
        "name": "single_item_as_list_reference_parse",
        "source_test": "single_item_as_list_reference",
        "validation": "parse",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "behaviors": [
          "list_coercion_disabled"
        ],
        "expected": {
          "count": 1,
          "object": {
            "item": "single"
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "item = single",
        "name": "single_item_as_list_reference_build_hierarchy",
        "source_test": "single_item_as_list_reference",
        "validation": "build_hierarchy",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "args": [
          "item"
        ],
        "behaviors": [
          "list_coercion_disabled"
        ],
        "expected": {
          "count": 0
        },
        "features": [],
        "functions": [
          "get_list"
        ],
        "input": "item = single",
        "name": "single_item_as_list_reference_get_list",
        "source_test": "single_item_as_list_reference",
        "validation": "get_list",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "behaviors": [
          "list_coercion_disabled"
        ],
        "expected": {
          "count": 3,
          "entries": [
            {
              "key": "ports",
              "value": "80"
            },
            {
              "key": "ports",
              "value": "443"
            },
            {
              "key": "host",
              "value": "localhost"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "ports = 80\nports = 443\nhost = localhost",
        "name": "mixed_duplicate_single_keys_reference_parse",
        "source_test": "mixed_duplicate_single_keys_reference",
        "validation": "parse",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "behaviors": [
          "list_coercion_disabled"
        ],
        "expected": {
          "count": 1,
          "object": {
            "host": "localhost",
            "ports": [
              "443",
              "80"
            ]
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "ports = 80\nports = 443\nhost = localhost",
        "name": "mixed_duplicate_single_keys_reference_build_hierarchy",
        "source_test": "mixed_duplicate_single_keys_reference",
        "validation": "build_hierarchy",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "args": [
          "host"
        ],
        "behaviors": [
          "list_coercion_disabled"
        ],
        "expected": {
          "count": 0
        },
        "features": [],
        "functions": [
          "get_list"
        ],
        "input": "ports = 80\nports = 443\nhost = localhost",
        "name": "mixed_duplicate_single_keys_reference_get_list",
        "source_test": "mixed_duplicate_single_keys_reference",
        "validation": "get_list",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "behaviors": [
          "list_coercion_disabled"
        ],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "database",
              "value": "\n  hosts = primary\n  hosts = secondary\n  port = 5432"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "database =\n  hosts = primary\n  hosts = secondary\n  port = 5432",
        "name": "nested_list_access_reference_parse",
        "source_test": "nested_list_access_reference",
        "validation": "parse",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "behaviors": [
          "list_coercion_disabled"
        ],
        "expected": {
          "count": 1,
          "object": {
            "database": {
              "hosts": [
                "primary",
                "secondary"
              ],
              "port": "5432"
            }
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "database =\n  hosts = primary\n  hosts = secondary\n  port = 5432",
        "name": "nested_list_access_reference_build_hierarchy",
        "source_test": "nested_list_access_reference",
        "validation": "build_hierarchy",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "args": [
          "database",
          "port"
        ],
        "behaviors": [
          "list_coercion_disabled"
        ],
        "expected": {
          "count": 0
        },
        "features": [],
        "functions": [
          "get_list"
        ],
        "input": "database =\n  hosts = primary\n  hosts = secondary\n  port = 5432",
        "name": "nested_list_access_reference_get_list",
        "source_test": "nested_list_access_reference",
        "validation": "get_list",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "empty_list",
              "value": ""
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "empty_list =",
        "name": "empty_list_reference_parse",
        "source_test": "empty_list_reference",
        "validation": "parse",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "empty_list": ""
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "empty_list =",
        "name": "empty_list_reference_build_hierarchy",
        "source_test": "empty_list_reference",
        "validation": "build_hierarchy",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "args": [
          "empty_list"
        ],
        "behaviors": [],
        "expected": {
          "count": 0
        },
        "features": [],
        "functions": [
          "get_list"
        ],
        "input": "empty_list =",
        "name": "empty_list_reference_get_list",
        "source_test": "empty_list_reference",
        "validation": "get_list",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 4,
          "entries": [
            {
              "key": "numbers",
              "value": "1"
            },
            {
              "key": "numbers",
              "value": "42"
            },
            {
              "key": "numbers",
              "value": "-17"
            },
            {
              "key": "numbers",
              "value": "0"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "numbers = 1\nnumbers = 42\nnumbers = -17\nnumbers = 0",
        "name": "list_with_numbers_reference_parse",
        "source_test": "list_with_numbers_reference",
        "validation": "parse",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "numbers": [
              "1",
              "42",
              "-17",
              "0"
            ]
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "numbers = 1\nnumbers = 42\nnumbers = -17\nnumbers = 0",
        "name": "list_with_numbers_reference_build_hierarchy",
        "source_test": "list_with_numbers_reference",
        "validation": "build_hierarchy",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "args": [
          "numbers"
        ],
        "behaviors": [],
        "expected": {
          "count": 0
        },
        "features": [],
        "functions": [
          "get_list"
        ],
        "input": "numbers = 1\nnumbers = 42\nnumbers = -17\nnumbers = 0",
        "name": "list_with_numbers_reference_get_list",
        "source_test": "list_with_numbers_reference",
        "validation": "get_list",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 4,
          "entries": [
            {
              "key": "flags",
              "value": "true"
            },
            {
              "key": "flags",
              "value": "false"
            },
            {
              "key": "flags",
              "value": "yes"
            },
            {
              "key": "flags",
              "value": "no"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "flags = true\nflags = false\nflags = yes\nflags = no",
        "name": "list_with_booleans_reference_parse",
        "source_test": "list_with_booleans_reference",
        "validation": "parse",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "flags": [
              "true",
              "false",
              "yes",
              "no"
            ]
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "flags = true\nflags = false\nflags = yes\nflags = no",
        "name": "list_with_booleans_reference_build_hierarchy",
        "source_test": "list_with_booleans_reference",
        "validation": "build_hierarchy",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "args": [
          "flags"
        ],
        "behaviors": [],
        "expected": {
          "count": 0
        },
        "features": [],
        "functions": [
          "get_list"
        ],
        "input": "flags = true\nflags = false\nflags = yes\nflags = no",
        "name": "list_with_booleans_reference_get_list",
        "source_test": "list_with_booleans_reference",
        "validation": "get_list",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 4,
          "entries": [
            {
              "key": "items",
              "value": "spaced"
            },
            {
              "key": "items",
              "value": "normal"
            },
            {
              "key": "items",
              "value": ""
            },
            {
              "key": "items",
              "value": ""
            }
          ]
        },
        "features": [
          "whitespace"
        ],
        "functions": [
          "parse"
        ],
        "input": "items =   spaced   \nitems = normal\nitems =\nitems =   ",
        "name": "list_with_whitespace_reference_parse",
        "source_test": "list_with_whitespace_reference",
        "validation": "parse",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "items": [
              "spaced",
              "normal"
            ]
          }
        },
        "features": [
          "whitespace"
        ],
        "functions": [
          "build_hierarchy"
        ],
        "input": "items =   spaced   \nitems = normal\nitems =\nitems =   ",
        "name": "list_with_whitespace_reference_build_hierarchy",
        "source_test": "list_with_whitespace_reference",
        "validation": "build_hierarchy",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "args": [
          "items"
        ],
        "behaviors": [],
        "expected": {
          "count": 0
        },
        "features": [
          "whitespace"
        ],
        "functions": [
          "get_list"
        ],
        "input": "items =   spaced   \nitems = normal\nitems =\nitems =   ",
        "name": "list_with_whitespace_reference_get_list",
        "source_test": "list_with_whitespace_reference",
        "validation": "get_list",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "config",
              "value": "\n  environments =\n    production =\n      servers = web1\n      servers = web2\n      servers = api1"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "config =\n  environments =\n    production =\n      servers = web1\n      servers = web2\n      servers = api1",
        "name": "deeply_nested_list_reference_parse",
        "source_test": "deeply_nested_list_reference",
        "validation": "parse",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "config": {
              "environments": {
                "production": {
                  "servers": [
                    "web1",
                    "web2",
                    "api1"
                  ]
                }
              }
            }
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "config =\n  environments =\n    production =\n      servers = web1\n      servers = web2\n      servers = api1",
        "name": "deeply_nested_list_reference_build_hierarchy",
        "source_test": "deeply_nested_list_reference",
        "validation": "build_hierarchy",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "args": [
          "config",
          "environments",
          "production",
          "servers"
        ],
        "behaviors": [],
        "expected": {
          "count": 0
        },
        "features": [],
        "functions": [
          "get_list"
        ],
        "input": "config =\n  environments =\n    production =\n      servers = web1\n      servers = web2\n      servers = api1",
        "name": "deeply_nested_list_reference_get_list",
        "source_test": "deeply_nested_list_reference",
        "validation": "get_list",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 4,
          "entries": [
            {
              "key": "names",
              "value": "张三"
            },
            {
              "key": "names",
              "value": "José"
            },
            {
              "key": "names",
              "value": "François"
            },
            {
              "key": "names",
              "value": "العربية"
            }
          ]
        },
        "features": [
          "unicode"
        ],
        "functions": [
          "parse"
        ],
        "input": "names = 张三\nnames = José\nnames = François\nnames = العربية",
        "name": "list_with_unicode_reference_parse",
        "source_test": "list_with_unicode_reference",
        "validation": "parse",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "names": [
              "张三",
              "José",
              "François",
              "العربية"
            ]
          }
        },
        "features": [
          "unicode"
        ],
        "functions": [
          "build_hierarchy"
        ],
        "input": "names = 张三\nnames = José\nnames = François\nnames = العربية",
        "name": "list_with_unicode_reference_build_hierarchy",
        "source_test": "list_with_unicode_reference",
        "validation": "build_hierarchy",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "args": [
          "names"
        ],
        "behaviors": [],
        "expected": {
          "count": 0
        },
        "features": [
          "unicode"
        ],
        "functions": [
          "get_list"
        ],
        "input": "names = 张三\nnames = José\nnames = François\nnames = العربية",
        "name": "list_with_unicode_reference_get_list",
        "source_test": "list_with_unicode_reference",
        "validation": "get_list",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 3,
          "entries": [
            {
              "key": "symbols",
              "value": "@#$%"
            },
            {
              "key": "symbols",
              "value": "!^&*()"
            },
            {
              "key": "symbols",
              "value": "[]{}|"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "symbols = @#$%\nsymbols = !^&*()\nsymbols = []{}|",
        "name": "list_with_special_characters_reference_parse",
        "source_test": "list_with_special_characters_reference",
        "validation": "parse",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "symbols": [
              "@#$%",
              "!^&*()",
              "[]{}|"
            ]
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "symbols = @#$%\nsymbols = !^&*()\nsymbols = []{}|",
        "name": "list_with_special_characters_reference_build_hierarchy",
        "source_test": "list_with_special_characters_reference",
        "validation": "build_hierarchy",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "args": [
          "symbols"
        ],
        "behaviors": [],
        "expected": {
          "count": 0
        },
        "features": [],
        "functions": [
          "get_list"
        ],
        "input": "symbols = @#$%\nsymbols = !^&*()\nsymbols = []{}|",
        "name": "list_with_special_characters_reference_get_list",
        "source_test": "list_with_special_characters_reference",
        "validation": "get_list",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "behaviors": [
          "list_coercion_disabled"
        ],
        "expected": {
          "count": 1,
          "object": {
            "config": {
              "cache": "redis",
              "database": {
                "hosts": [
                  "backup",
                  "primary"
                ],
                "port": "5432"
              },
              "servers": [
                "web2",
                "web1"
              ]
            },
            "features": [
              "api",
              "auth",
              "ui"
            ]
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "config =\n  servers = web1\n  servers = web2\n  database =\n    hosts = primary\n    hosts = backup\n    port = 5432\n  cache = redis\nfeatures = auth\nfeatures = api\nfeatures = ui",
        "name": "complex_mixed_list_scenarios_reference_build_hierarchy",
        "source_test": "complex_mixed_list_scenarios_reference",
        "validation": "build_hierarchy",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "args": [
          "features"
        ],
        "behaviors": [
          "list_coercion_disabled"
        ],
        "expected": {
          "count": 0
        },
        "features": [],
        "functions": [
          "get_list"
        ],
        "input": "config =\n  servers = web1\n  servers = web2\n  database =\n    hosts = primary\n    hosts = backup\n    port = 5432\n  cache = redis\nfeatures = auth\nfeatures = api\nfeatures = ui",
        "name": "complex_mixed_list_scenarios_reference_get_list",
        "source_test": "complex_mixed_list_scenarios_reference",
        "validation": "get_list",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "behaviors": [
          "list_coercion_disabled"
        ],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "safe",
              "value": "value"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "safe = value",
        "name": "list_path_traversal_protection_reference_parse",
        "source_test": "list_path_traversal_protection_reference",
        "validation": "parse",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "behaviors": [
          "list_coercion_disabled"
        ],
        "expected": {
          "count": 1,
          "object": {
            "safe": "value"
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "safe = value",
        "name": "list_path_traversal_protection_reference_build_hierarchy",
        "source_test": "list_path_traversal_protection_reference",
        "validation": "build_hierarchy",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "args": [
          "safe"
        ],
        "behaviors": [
          "list_coercion_disabled"
        ],
        "expected": {
          "count": 0
        },
        "features": [],
        "functions": [
          "get_list"
        ],
        "input": "safe = value",
        "name": "list_path_traversal_protection_reference_get_list",
        "source_test": "list_path_traversal_protection_reference",
        "validation": "get_list",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "empty_key",
              "value": ""
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "empty_key =",
        "name": "empty_value_reference_behavior_parse",
        "source_test": "empty_value_reference_behavior",
        "validation": "parse",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "empty_key": ""
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "empty_key =",
        "name": "empty_value_reference_behavior_build_hierarchy",
        "source_test": "empty_value_reference_behavior",
        "validation": "build_hierarchy",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "value": "empty_key =\n"
        },
        "features": [],
        "functions": [
          "canonical_format"
        ],
        "input": "empty_key =",
        "name": "canonical_format_empty_values_ocaml_reference_canonical_format",
        "source_test": "canonical_format_empty_values_ocaml_reference",
        "validation": "canonical_format",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "behaviors": [
          "tabs_preserve"
        ],
        "expected": {
          "count": 1,
          "value": "value_with_tabs =\n  text\t\twith\ttabs =\n"
        },
        "features": [],
        "functions": [
          "canonical_format"
        ],
        "input": "value_with_tabs = text\t\twith\ttabs\t",
        "name": "canonical_format_tab_preservation_ocaml_reference_canonical_format",
        "source_test": "canonical_format_tab_preservation_ocaml_reference",
        "validation": "canonical_format",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "value": "emo =\n  🌟✨ =\nunicode =\n  你好世界 =\n"
        },
        "features": [
          "unicode"
        ],
        "functions": [
          "canonical_format"
        ],
        "input": "unicode = 你好世界\nemo = 🌟✨",
        "name": "canonical_format_unicode_ocaml_reference_canonical_format",
        "source_test": "canonical_format_unicode_ocaml_reference",
        "validation": "canonical_format",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "behaviors": [
          "crlf_preserve_literal"
        ],
        "expected": {
          "count": 2,
          "entries": [
            {
              "key": "key1",
              "value": "value1\r"
            },
            {
              "key": "key2",
              "value": "value2\r"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "key1 = value1\r\nkey2 = value2\r\n",
        "name": "canonical_format_line_endings_reference_behavior_parse",
        "source_test": "canonical_format_line_endings_reference_behavior",
        "validation": "parse",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "behaviors": [
          "crlf_preserve_literal"
        ],
        "expected": {
          "count": 1,
          "value": "key1 =\n  value1\r =\nkey2 =\n  value2\r =\n"
        },
        "features": [],
        "functions": [
          "canonical_format"
        ],
        "input": "key1 = value1\r\nkey2 = value2\r\n",
        "name": "canonical_format_line_endings_reference_behavior_canonical_format",
        "source_test": "canonical_format_line_endings_reference_behavior",
        "validation": "canonical_format",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "behaviors": [
          "strict_spacing"
        ],
        "expected": {
          "count": 1,
          "value": "key1 =\n  value1 =\nkey2 =\n  value2 =\nkey3 =\n  value3 =\n"
        },
        "features": [],
        "functions": [
          "canonical_format"
        ],
        "input": "key1=value1\nkey2  =  value2\nkey3\t=\tvalue3",
        "name": "canonical_format_consistent_spacing_ocaml_reference_canonical_format",
        "source_test": "canonical_format_consistent_spacing_ocaml_reference",
        "validation": "canonical_format",
        "variants": [
          "reference_compliant"
        ]
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "value": "a =\n  first =\nm =\n  middle =\nz =\n  last =\n"
        },
        "features": [],
        "functions": [
          "canonical_format"
        ],
        "input": "z = last\na = first\nm = middle",
        "name": "deterministic_output_ocaml_reference_canonical_format",
        "source_test": "deterministic_output_ocaml_reference",
        "validation": "canonical_format",
        "variants": [
          "reference_compliant"
        ]
      }
    ],
    "file": "api_reference_compliant.json"
  },
  {
    "name": "Typed Access",
    "description": "Type-safe value extraction (GetString, GetInt, etc.)",
    "tests": [
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "port",
              "value": "8080"
            }
          ]
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "parse"
        ],
        "input": "port = 8080",
        "name": "parse_basic_integer_parse",
        "source_test": "parse_basic_integer",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "port": "8080"
          }
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "build_hierarchy"
        ],
        "input": "port = 8080",
        "name": "parse_basic_integer_build_hierarchy",
        "source_test": "parse_basic_integer",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "args": [
          "port"
        ],
        "behaviors": [],
        "expected": {
          "count": 1,
          "value": 8080
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "get_int"
        ],
        "input": "port = 8080",
        "name": "parse_basic_integer_get_int",
        "source_test": "parse_basic_integer",
        "validation": "get_int",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "temperature",
              "value": "98.6"
            }
          ]
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "parse"
        ],
        "input": "temperature = 98.6",
        "name": "parse_basic_float_parse",
        "source_test": "parse_basic_float",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "temperature": "98.6"
          }
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "build_hierarchy"
        ],
        "input": "temperature = 98.6",
        "name": "parse_basic_float_build_hierarchy",
        "source_test": "parse_basic_float",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "args": [
          "temperature"
        ],
        "behaviors": [],
        "expected": {
          "count": 1,
          "value": 98.6
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "get_float"
        ],
        "input": "temperature = 98.6",
        "name": "parse_basic_float_get_float",
        "source_test": "parse_basic_float",
        "validation": "get_float",
        "variants": []
      },
      {
        "behaviors": [
          "boolean_strict",
          "boolean_lenient"
        ],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "enabled",
              "value": "true"
            }
          ]
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "parse"
        ],
        "input": "enabled = true",
        "name": "parse_boolean_true_parse",
        "source_test": "parse_boolean_true",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [
          "boolean_strict",
          "boolean_lenient"
        ],
        "expected": {
          "count": 1,
          "object": {
            "enabled": "true"
          }
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "build_hierarchy"
        ],
        "input": "enabled = true",
        "name": "parse_boolean_true_build_hierarchy",
        "source_test": "parse_boolean_true",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "args": [
          "enabled"
        ],
        "behaviors": [
          "boolean_strict",
          "boolean_lenient"
        ],
        "expected": {
          "count": 1,
          "value": true
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "get_bool"
        ],
        "input": "enabled = true",
        "name": "parse_boolean_true_get_bool",
        "source_test": "parse_boolean_true",
        "validation": "get_bool",
        "variants": []
      },
      {
        "behaviors": [
          "boolean_lenient"
        ],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "active",
              "value": "yes"
            }
          ]
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "parse"
        ],
        "input": "active = yes",
        "name": "parse_boolean_yes_parse",
        "source_test": "parse_boolean_yes",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [
          "boolean_lenient"
        ],
        "expected": {
          "count": 1,
          "object": {
            "active": "yes"
          }
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "build_hierarchy"
        ],
        "input": "active = yes",
        "name": "parse_boolean_yes_build_hierarchy",
        "source_test": "parse_boolean_yes",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "args": [
          "active"
        ],
        "behaviors": [
          "boolean_lenient"
        ],
        "expected": {
          "count": 1,
          "value": true
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "get_bool"
        ],
        "input": "active = yes",
        "name": "parse_boolean_yes_get_bool",
        "source_test": "parse_boolean_yes",
        "validation": "get_bool",
        "variants": []
      },
      {
        "behaviors": [
          "boolean_strict"
        ],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "active",
              "value": "yes"
            }
          ]
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "parse"
        ],
        "input": "active = yes",
        "name": "parse_boolean_yes_strict_literal_parse",
        "source_test": "parse_boolean_yes_strict_literal",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [
          "boolean_strict"
        ],
        "expected": {
          "count": 1,
          "object": {
            "active": "yes"
          }
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "build_hierarchy"
        ],
        "input": "active = yes",
        "name": "parse_boolean_yes_strict_literal_build_hierarchy",
        "source_test": "parse_boolean_yes_strict_literal",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "args": [
          "active"
        ],
        "behaviors": [
          "boolean_strict"
        ],
        "expected": {
          "count": 1
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "get_bool"
        ],
        "input": "active = yes",
        "name": "parse_boolean_yes_strict_literal_get_bool",
        "source_test": "parse_boolean_yes_strict_literal",
        "validation": "get_bool",
        "variants": []
      },
      {
        "behaviors": [
          "boolean_strict",
          "boolean_lenient"
        ],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "disabled",
              "value": "false"
            }
          ]
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "parse"
        ],
        "input": "disabled = false",
        "name": "parse_boolean_false_parse",
        "source_test": "parse_boolean_false",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [
          "boolean_strict",
          "boolean_lenient"
        ],
        "expected": {
          "count": 1,
          "object": {
            "disabled": "false"
          }
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "build_hierarchy"
        ],
        "input": "disabled = false",
        "name": "parse_boolean_false_build_hierarchy",
        "source_test": "parse_boolean_false",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "args": [
          "disabled"
        ],
        "behaviors": [
          "boolean_strict",
          "boolean_lenient"
        ],
        "expected": {
          "count": 1,
          "value": false
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "get_bool"
        ],
        "input": "disabled = false",
        "name": "parse_boolean_false_get_bool",
        "source_test": "parse_boolean_false",
        "validation": "get_bool",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "name",
              "value": "Alice"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "name = Alice",
        "name": "parse_string_fallback_parse",
        "source_test": "parse_string_fallback",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "name": "Alice"
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "name = Alice",
        "name": "parse_string_fallback_build_hierarchy",
        "source_test": "parse_string_fallback",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "args": [
          "name"
        ],
        "behaviors": [],
        "expected": {
          "count": 1,
          "value": "Alice"
        },
        "features": [],
        "functions": [
          "get_string"
        ],
        "input": "name = Alice",
        "name": "parse_string_fallback_get_string",
        "source_test": "parse_string_fallback",
        "validation": "get_string",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "offset",
              "value": "-42"
            }
          ]
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "parse"
        ],
        "input": "offset = -42",
        "name": "parse_negative_integer_parse",
        "source_test": "parse_negative_integer",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "offset": "-42"
          }
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "build_hierarchy"
        ],
        "input": "offset = -42",
        "name": "parse_negative_integer_build_hierarchy",
        "source_test": "parse_negative_integer",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "args": [
          "offset"
        ],
        "behaviors": [],
        "expected": {
          "count": 1,
          "value": -42
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "get_int"
        ],
        "input": "offset = -42",
        "name": "parse_negative_integer_get_int",
        "source_test": "parse_negative_integer",
        "validation": "get_int",
        "variants": []
      },
      {
        "behaviors": [
          "boolean_lenient"
        ],
        "expected": {
          "count": 3,
          "entries": [
            {
              "key": "count",
              "value": "0"
            },
            {
              "key": "distance",
              "value": "0.0"
            },
            {
              "key": "disabled",
              "value": "no"
            }
          ]
        },
        "features": [
          "empty_keys",
          "optional_typed_accessors"
        ],
        "functions": [
          "parse"
        ],
        "input": "count = 0\ndistance = 0.0\ndisabled = no",
        "name": "parse_zero_values_parse",
        "source_test": "parse_zero_values",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [
          "boolean_lenient"
        ],
        "expected": {
          "count": 1,
          "object": {
            "count": "0",
            "disabled": "no",
            "distance": "0.0"
          }
        },
        "features": [
          "empty_keys",
          "optional_typed_accessors"
        ],
        "functions": [
          "build_hierarchy"
        ],
        "input": "count = 0\ndistance = 0.0\ndisabled = no",
        "name": "parse_zero_values_build_hierarchy",
        "source_test": "parse_zero_values",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "args": [
          "count"
        ],
        "behaviors": [
          "boolean_lenient"
        ],
        "expected": {
          "count": 1,
          "value": 0
        },
        "features": [
          "empty_keys",
          "optional_typed_accessors"
        ],
        "functions": [
          "get_int"
        ],
        "input": "count = 0\ndistance = 0.0\ndisabled = no",
        "name": "parse_zero_values_get_int",
        "source_test": "parse_zero_values",
        "validation": "get_int",
        "variants": []
      },
      {
        "args": [
          "disabled"
        ],
        "behaviors": [
          "boolean_lenient"
        ],
        "expected": {
          "count": 1,
          "value": false
        },
        "features": [
          "empty_keys",
          "optional_typed_accessors"
        ],
        "functions": [
          "get_bool"
        ],
        "input": "count = 0\ndistance = 0.0\ndisabled = no",
        "name": "parse_zero_values_get_bool",
        "source_test": "parse_zero_values",
        "validation": "get_bool",
        "variants": []
      },
      {
        "args": [
          "distance"
        ],
        "behaviors": [
          "boolean_lenient"
        ],
        "expected": {
          "count": 1,
          "value": 0
        },
        "features": [
          "empty_keys",
          "optional_typed_accessors"
        ],
        "functions": [
          "get_float"
        ],
        "input": "count = 0\ndistance = 0.0\ndisabled = no",
        "name": "parse_zero_values_get_float",
        "source_test": "parse_zero_values",
        "validation": "get_float",
        "variants": []
      },
      {
        "behaviors": [
          "boolean_strict"
        ],
        "expected": {
          "count": 3,
          "entries": [
            {
              "key": "count",
              "value": "0"
            },
            {
              "key": "distance",
              "value": "0.0"
            },
            {
              "key": "disabled",
              "value": "no"
            }
          ]
        },
        "features": [
          "empty_keys",
          "optional_typed_accessors"
        ],
        "functions": [
          "parse"
        ],
        "input": "count = 0\ndistance = 0.0\ndisabled = no",
        "name": "parse_zero_values_strict_literal_parse",
        "source_test": "parse_zero_values_strict_literal",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [
          "boolean_strict"
        ],
        "expected": {
          "count": 1,
          "object": {
            "count": "0",
            "disabled": "no",
            "distance": "0.0"
          }
        },
        "features": [
          "empty_keys",
          "optional_typed_accessors"
        ],
        "functions": [
          "build_hierarchy"
        ],
        "input": "count = 0\ndistance = 0.0\ndisabled = no",
        "name": "parse_zero_values_strict_literal_build_hierarchy",
        "source_test": "parse_zero_values_strict_literal",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "args": [
          "count"
        ],
        "behaviors": [
          "boolean_strict"
        ],
        "expected": {
          "count": 1,
          "value": 0
        },
        "features": [
          "empty_keys",
          "optional_typed_accessors"
        ],
        "functions": [
          "get_int"
        ],
        "input": "count = 0\ndistance = 0.0\ndisabled = no",
        "name": "parse_zero_values_strict_literal_get_int",
        "source_test": "parse_zero_values_strict_literal",
        "validation": "get_int",
        "variants": []
      },
      {
        "args": [
          "disabled"
        ],
        "behaviors": [
          "boolean_strict"
        ],
        "expected": {
          "count": 1
        },
        "features": [
          "empty_keys",
          "optional_typed_accessors"
        ],
        "functions": [
          "get_bool"
        ],
        "input": "count = 0\ndistance = 0.0\ndisabled = no",
        "name": "parse_zero_values_strict_literal_get_bool",
        "source_test": "parse_zero_values_strict_literal",
        "validation": "get_bool",
        "variants": []
      },
      {
        "args": [
          "distance"
        ],
        "behaviors": [
          "boolean_strict"
        ],
        "expected": {
          "count": 1,
          "value": 0
        },
        "features": [
          "empty_keys",
          "optional_typed_accessors"
        ],
        "functions": [
          "get_float"
        ],
        "input": "count = 0\ndistance = 0.0\ndisabled = no",
        "name": "parse_zero_values_strict_literal_get_float",
        "source_test": "parse_zero_values_strict_literal",
        "validation": "get_float",
        "variants": []
      },
      {
        "behaviors": [
          "boolean_lenient"
        ],
        "expected": {
          "count": 7,
          "entries": [
            {
              "key": "flag1",
              "value": "yes"
            },
            {
              "key": "flag2",
              "value": "on"
            },
            {
              "key": "flag3",
              "value": "1"
            },
            {
              "key": "flag4",
              "value": "false"
            },
            {
              "key": "flag5",
              "value": "no"
            },
            {
              "key": "flag6",
              "value": "off"
            },
            {
              "key": "flag7",
              "value": "0"
            }
          ]
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "parse"
        ],
        "input": "flag1 = yes\nflag2 = on\nflag3 = 1\nflag4 = false\nflag5 = no\nflag6 = off\nflag7 = 0",
        "name": "parse_boolean_variants_parse",
        "source_test": "parse_boolean_variants",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [
          "boolean_lenient"
        ],
        "expected": {
          "count": 1,
          "object": {
            "flag1": "yes",
            "flag2": "on",
            "flag3": "1",
            "flag4": "false",
            "flag5": "no",
            "flag6": "off",
            "flag7": "0"
          }
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "build_hierarchy"
        ],
        "input": "flag1 = yes\nflag2 = on\nflag3 = 1\nflag4 = false\nflag5 = no\nflag6 = off\nflag7 = 0",
        "name": "parse_boolean_variants_build_hierarchy",
        "source_test": "parse_boolean_variants",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "args": [
          "flag3"
        ],
        "behaviors": [
          "boolean_lenient"
        ],
        "expected": {
          "count": 1,
          "value": 1
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "get_int"
        ],
        "input": "flag1 = yes\nflag2 = on\nflag3 = 1\nflag4 = false\nflag5 = no\nflag6 = off\nflag7 = 0",
        "name": "parse_boolean_variants_get_int",
        "source_test": "parse_boolean_variants",
        "validation": "get_int",
        "variants": []
      },
      {
        "args": [
          "flag1"
        ],
        "behaviors": [
          "boolean_lenient"
        ],
        "expected": {
          "count": 1,
          "value": true
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "get_bool"
        ],
        "input": "flag1 = yes\nflag2 = on\nflag3 = 1\nflag4 = false\nflag5 = no\nflag6 = off\nflag7 = 0",
        "name": "parse_boolean_variants_get_bool",
        "source_test": "parse_boolean_variants",
        "validation": "get_bool",
        "variants": []
      },
      {
        "behaviors": [
          "boolean_strict"
        ],
        "expected": {
          "count": 7,
          "entries": [
            {
              "key": "flag1",
              "value": "yes"
            },
            {
              "key": "flag2",
              "value": "on"
            },
            {
              "key": "flag3",
              "value": "1"
            },
            {
              "key": "flag4",
              "value": "false"
            },
            {
              "key": "flag5",
              "value": "no"
            },
            {
              "key": "flag6",
              "value": "off"
            },
            {
              "key": "flag7",
              "value": "0"
            }
          ]
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "parse"
        ],
        "input": "flag1 = yes\nflag2 = on\nflag3 = 1\nflag4 = false\nflag5 = no\nflag6 = off\nflag7 = 0",
        "name": "parse_boolean_variants_strict_literal_parse",
        "source_test": "parse_boolean_variants_strict_literal",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [
          "boolean_strict"
        ],
        "expected": {
          "count": 1,
          "object": {
            "flag1": "yes",
            "flag2": "on",
            "flag3": "1",
            "flag4": "false",
            "flag5": "no",
            "flag6": "off",
            "flag7": "0"
          }
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "build_hierarchy"
        ],
        "input": "flag1 = yes\nflag2 = on\nflag3 = 1\nflag4 = false\nflag5 = no\nflag6 = off\nflag7 = 0",
        "name": "parse_boolean_variants_strict_literal_build_hierarchy",
        "source_test": "parse_boolean_variants_strict_literal",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "args": [
          "flag3"
        ],
        "behaviors": [
          "boolean_strict"
        ],
        "expected": {
          "count": 1,
          "value": 1
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "get_int"
        ],
        "input": "flag1 = yes\nflag2 = on\nflag3 = 1\nflag4 = false\nflag5 = no\nflag6 = off\nflag7 = 0",
        "name": "parse_boolean_variants_strict_literal_get_int",
        "source_test": "parse_boolean_variants_strict_literal",
        "validation": "get_int",
        "variants": []
      },
      {
        "args": [
          "flag1"
        ],
        "behaviors": [
          "boolean_strict"
        ],
        "expected": {
          "count": 1
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "get_bool"
        ],
        "input": "flag1 = yes\nflag2 = on\nflag3 = 1\nflag4 = false\nflag5 = no\nflag6 = off\nflag7 = 0",
        "name": "parse_boolean_variants_strict_literal_get_bool",
        "source_test": "parse_boolean_variants_strict_literal",
        "validation": "get_bool",
        "variants": []
      },
      {
        "behaviors": [
          "boolean_lenient"
        ],
        "expected": {
          "count": 5,
          "entries": [
            {
              "key": "host",
              "value": "localhost"
            },
            {
              "key": "port",
              "value": "8080"
            },
            {
              "key": "ssl",
              "value": "true"
            },
            {
              "key": "timeout",
              "value": "30.5"
            },
            {
              "key": "debug",
              "value": "off"
            }
          ]
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "parse"
        ],
        "input": "host = localhost\nport = 8080\nssl = true\ntimeout = 30.5\ndebug = off",
        "name": "parse_mixed_types_parse",
        "source_test": "parse_mixed_types",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [
          "boolean_lenient"
        ],
        "expected": {
          "count": 1,
          "object": {
            "debug": "off",
            "host": "localhost",
            "port": "8080",
            "ssl": "true",
            "timeout": "30.5"
          }
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "build_hierarchy"
        ],
        "input": "host = localhost\nport = 8080\nssl = true\ntimeout = 30.5\ndebug = off",
        "name": "parse_mixed_types_build_hierarchy",
        "source_test": "parse_mixed_types",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "args": [
          "host"
        ],
        "behaviors": [
          "boolean_lenient"
        ],
        "expected": {
          "count": 1,
          "value": "localhost"
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "get_string"
        ],
        "input": "host = localhost\nport = 8080\nssl = true\ntimeout = 30.5\ndebug = off",
        "name": "parse_mixed_types_get_string",
        "source_test": "parse_mixed_types",
        "validation": "get_string",
        "variants": []
      },
      {
        "args": [
          "port"
        ],
        "behaviors": [
          "boolean_lenient"
        ],
        "expected": {
          "count": 1,
          "value": 8080
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "get_int"
        ],
        "input": "host = localhost\nport = 8080\nssl = true\ntimeout = 30.5\ndebug = off",
        "name": "parse_mixed_types_get_int",
        "source_test": "parse_mixed_types",
        "validation": "get_int",
        "variants": []
      },
      {
        "args": [
          "ssl"
        ],
        "behaviors": [
          "boolean_lenient"
        ],
        "expected": {
          "count": 1,
          "value": true
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "get_bool"
        ],
        "input": "host = localhost\nport = 8080\nssl = true\ntimeout = 30.5\ndebug = off",
        "name": "parse_mixed_types_get_bool",
        "source_test": "parse_mixed_types",
        "validation": "get_bool",
        "variants": []
      },
      {
        "args": [
          "timeout"
        ],
        "behaviors": [
          "boolean_lenient"
        ],
        "expected": {
          "count": 1,
          "value": 30.5
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "get_float"
        ],
        "input": "host = localhost\nport = 8080\nssl = true\ntimeout = 30.5\ndebug = off",
        "name": "parse_mixed_types_get_float",
        "source_test": "parse_mixed_types",
        "validation": "get_float",
        "variants": []
      },
      {
        "behaviors": [
          "boolean_strict"
        ],
        "expected": {
          "count": 5,
          "entries": [
            {
              "key": "host",
              "value": "localhost"
            },
            {
              "key": "port",
              "value": "8080"
            },
            {
              "key": "ssl",
              "value": "true"
            },
            {
              "key": "timeout",
              "value": "30.5"
            },
            {
              "key": "debug",
              "value": "off"
            }
          ]
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "parse"
        ],
        "input": "host = localhost\nport = 8080\nssl = true\ntimeout = 30.5\ndebug = off",
        "name": "parse_mixed_types_strict_literal_parse",
        "source_test": "parse_mixed_types_strict_literal",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [
          "boolean_strict"
        ],
        "expected": {
          "count": 1,
          "object": {
            "debug": "off",
            "host": "localhost",
            "port": "8080",
            "ssl": "true",
            "timeout": "30.5"
          }
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "build_hierarchy"
        ],
        "input": "host = localhost\nport = 8080\nssl = true\ntimeout = 30.5\ndebug = off",
        "name": "parse_mixed_types_strict_literal_build_hierarchy",
        "source_test": "parse_mixed_types_strict_literal",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "args": [
          "host"
        ],
        "behaviors": [
          "boolean_strict"
        ],
        "expected": {
          "count": 1,
          "value": "localhost"
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "get_string"
        ],
        "input": "host = localhost\nport = 8080\nssl = true\ntimeout = 30.5\ndebug = off",
        "name": "parse_mixed_types_strict_literal_get_string",
        "source_test": "parse_mixed_types_strict_literal",
        "validation": "get_string",
        "variants": []
      },
      {
        "args": [
          "port"
        ],
        "behaviors": [
          "boolean_strict"
        ],
        "expected": {
          "count": 1,
          "value": 8080
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "get_int"
        ],
        "input": "host = localhost\nport = 8080\nssl = true\ntimeout = 30.5\ndebug = off",
        "name": "parse_mixed_types_strict_literal_get_int",
        "source_test": "parse_mixed_types_strict_literal",
        "validation": "get_int",
        "variants": []
      },
      {
        "args": [
          "ssl"
        ],
        "behaviors": [
          "boolean_strict"
        ],
        "expected": {
          "count": 1,
          "value": true
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "get_bool"
        ],
        "input": "host = localhost\nport = 8080\nssl = true\ntimeout = 30.5\ndebug = off",
        "name": "parse_mixed_types_strict_literal_get_bool",
        "source_test": "parse_mixed_types_strict_literal",
        "validation": "get_bool",
        "variants": []
      },
      {
        "args": [
          "timeout"
        ],
        "behaviors": [
          "boolean_strict"
        ],
        "expected": {
          "count": 1,
          "value": 30.5
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "get_float"
        ],
        "input": "host = localhost\nport = 8080\nssl = true\ntimeout = 30.5\ndebug = off",
        "name": "parse_mixed_types_strict_literal_get_float",
        "source_test": "parse_mixed_types_strict_literal",
        "validation": "get_float",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 2,
          "entries": [
            {
              "key": "number",
              "value": "42"
            },
            {
              "key": "flag",
              "value": "true"
            }
          ]
        },
        "features": [
          "whitespace",
          "optional_typed_accessors"
        ],
        "functions": [
          "parse"
        ],
        "input": "number =   42   \nflag =  true  ",
        "name": "parse_with_whitespace_parse",
        "source_test": "parse_with_whitespace",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "flag": "true",
            "number": "42"
          }
        },
        "features": [
          "whitespace",
          "optional_typed_accessors"
        ],
        "functions": [
          "build_hierarchy"
        ],
        "input": "number =   42   \nflag =  true  ",
        "name": "parse_with_whitespace_build_hierarchy",
        "source_test": "parse_with_whitespace",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "args": [
          "number"
        ],
        "behaviors": [],
        "expected": {
          "count": 1,
          "value": 42
        },
        "features": [
          "whitespace",
          "optional_typed_accessors"
        ],
        "functions": [
          "get_int"
        ],
        "input": "number =   42   \nflag =  true  ",
        "name": "parse_with_whitespace_get_int",
        "source_test": "parse_with_whitespace",
        "validation": "get_int",
        "variants": []
      },
      {
        "args": [
          "flag"
        ],
        "behaviors": [],
        "expected": {
          "count": 1,
          "value": true
        },
        "features": [
          "whitespace",
          "optional_typed_accessors"
        ],
        "functions": [
          "get_bool"
        ],
        "input": "number =   42   \nflag =  true  ",
        "name": "parse_with_whitespace_get_bool",
        "source_test": "parse_with_whitespace",
        "validation": "get_bool",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 4,
          "entries": [
            {
              "key": "number",
              "value": "42"
            },
            {
              "key": "decimal",
              "value": "3.14"
            },
            {
              "key": "flag",
              "value": "true"
            },
            {
              "key": "text",
              "value": "hello"
            }
          ]
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "parse"
        ],
        "input": "number = 42\ndecimal = 3.14\nflag = true\ntext = hello",
        "name": "parse_with_conservative_options_parse",
        "source_test": "parse_with_conservative_options",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "decimal": "3.14",
            "flag": "true",
            "number": "42",
            "text": "hello"
          }
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "build_hierarchy"
        ],
        "input": "number = 42\ndecimal = 3.14\nflag = true\ntext = hello",
        "name": "parse_with_conservative_options_build_hierarchy",
        "source_test": "parse_with_conservative_options",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "args": [
          "decimal"
        ],
        "behaviors": [],
        "expected": {
          "count": 1,
          "value": "3.14"
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "get_string"
        ],
        "input": "number = 42\ndecimal = 3.14\nflag = true\ntext = hello",
        "name": "parse_with_conservative_options_get_string",
        "source_test": "parse_with_conservative_options",
        "validation": "get_string",
        "variants": []
      },
      {
        "args": [
          "number"
        ],
        "behaviors": [],
        "expected": {
          "count": 1,
          "value": 42
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "get_int"
        ],
        "input": "number = 42\ndecimal = 3.14\nflag = true\ntext = hello",
        "name": "parse_with_conservative_options_get_int",
        "source_test": "parse_with_conservative_options",
        "validation": "get_int",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "port",
              "value": "not_a_number"
            }
          ]
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "parse"
        ],
        "input": "port = not_a_number",
        "name": "parse_integer_error_parse",
        "source_test": "parse_integer_error",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "port": "not_a_number"
          }
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "build_hierarchy"
        ],
        "input": "port = not_a_number",
        "name": "parse_integer_error_build_hierarchy",
        "source_test": "parse_integer_error",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "args": [
          "port"
        ],
        "behaviors": [],
        "expected": {
          "count": 1
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "get_int"
        ],
        "input": "port = not_a_number",
        "name": "parse_integer_error_get_int",
        "source_test": "parse_integer_error",
        "validation": "get_int",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "temperature",
              "value": "invalid"
            }
          ]
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "parse"
        ],
        "input": "temperature = invalid",
        "name": "parse_float_error_parse",
        "source_test": "parse_float_error",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "temperature": "invalid"
          }
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "build_hierarchy"
        ],
        "input": "temperature = invalid",
        "name": "parse_float_error_build_hierarchy",
        "source_test": "parse_float_error",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "args": [
          "temperature"
        ],
        "behaviors": [],
        "expected": {
          "count": 1
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "get_float"
        ],
        "input": "temperature = invalid",
        "name": "parse_float_error_get_float",
        "source_test": "parse_float_error",
        "validation": "get_float",
        "variants": []
      },
      {
        "behaviors": [
          "boolean_strict"
        ],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "enabled",
              "value": "maybe"
            }
          ]
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "parse"
        ],
        "input": "enabled = maybe",
        "name": "parse_boolean_error_parse",
        "source_test": "parse_boolean_error",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [
          "boolean_strict"
        ],
        "expected": {
          "count": 1,
          "object": {
            "enabled": "maybe"
          }
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "build_hierarchy"
        ],
        "input": "enabled = maybe",
        "name": "parse_boolean_error_build_hierarchy",
        "source_test": "parse_boolean_error",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "args": [
          "enabled"
        ],
        "behaviors": [
          "boolean_strict"
        ],
        "expected": {
          "count": 1
        },
        "features": [
          "optional_typed_accessors"
        ],
        "functions": [
          "get_bool"
        ],
        "input": "enabled = maybe",
        "name": "parse_boolean_error_get_bool",
        "source_test": "parse_boolean_error",
        "validation": "get_bool",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "existing",
              "value": "value"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "existing = value",
        "name": "parse_missing_path_error_parse",
        "source_test": "parse_missing_path_error",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "object": {
            "existing": "value"
          }
        },
        "features": [],
        "functions": [
          "build_hierarchy"
        ],
        "input": "existing = value",
        "name": "parse_missing_path_error_build_hierarchy",
        "source_test": "parse_missing_path_error",
        "validation": "build_hierarchy",
        "variants": []
      },
      {
        "args": [
          "missing"
        ],
        "behaviors": [],
        "expected": {
          "count": 1
        },
        "features": [],
        "functions": [
          "get_string"
        ],
        "input": "existing = value",
        "name": "parse_missing_path_error_get_string",
        "source_test": "parse_missing_path_error",
        "validation": "get_string",
        "variants": []
      }
    ],
    "file": "api_typed_access.json"
  },
  {
    "name": "Property Algebraic",
    "description": "property algebraic functionality",
    "tests": [
      {
        "behaviors": [],
        "expected": {
          "count": 3,
          "entries": [
            {
              "key": "a",
              "value": "1"
            },
            {
              "key": "b",
              "value": "2"
            },
            {
              "key": "c",
              "value": "3"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "a = 1\nb = 2\nc = 3",
        "name": "semigroup_associativity_basic_parse",
        "source_test": "semigroup_associativity_basic",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 2,
          "entries": [
            {
              "key": "config",
              "value": "\n  host = localhost\n  port = 8080"
            },
            {
              "key": "db",
              "value": "\n  name = test"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "config =\n  host = localhost\n  port = 8080\ndb =\n  name = test",
        "name": "semigroup_associativity_nested_parse",
        "source_test": "semigroup_associativity_nested",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 3,
          "entries": [
            {
              "key": "",
              "value": "item1"
            },
            {
              "key": "",
              "value": "item2"
            },
            {
              "key": "",
              "value": "item3"
            }
          ]
        },
        "features": [
          "empty_keys"
        ],
        "functions": [
          "parse"
        ],
        "input": "= item1\n= item2\n= item3",
        "name": "semigroup_associativity_lists_parse",
        "source_test": "semigroup_associativity_lists",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 2,
          "entries": [
            {
              "key": "key",
              "value": "value"
            },
            {
              "key": "nested",
              "value": "\n  sub = val"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "key = value\nnested =\n  sub = val",
        "name": "monoid_left_identity_basic_parse",
        "source_test": "monoid_left_identity_basic",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 2,
          "entries": [
            {
              "key": "key",
              "value": "value"
            },
            {
              "key": "nested",
              "value": "\n  sub = val"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "key = value\nnested =\n  sub = val",
        "name": "monoid_right_identity_basic_parse",
        "source_test": "monoid_right_identity_basic",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "config",
              "value": "\n  database =\n    host = localhost\n    port = 5432\n  cache =\n    redis = true"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "config =\n  database =\n    host = localhost\n    port = 5432\n  cache =\n    redis = true",
        "name": "monoid_left_identity_nested_parse",
        "source_test": "monoid_left_identity_nested",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "config",
              "value": "\n  database =\n    host = localhost\n    port = 5432\n  cache =\n    redis = true"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "config =\n  database =\n    host = localhost\n    port = 5432\n  cache =\n    redis = true",
        "name": "monoid_right_identity_nested_parse",
        "source_test": "monoid_right_identity_nested",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 3,
          "entries": [
            {
              "key": "",
              "value": "item1"
            },
            {
              "key": "",
              "value": "item2"
            },
            {
              "key": "",
              "value": "item3"
            }
          ]
        },
        "features": [
          "empty_keys"
        ],
        "functions": [
          "parse"
        ],
        "input": "= item1\n= item2\n= item3",
        "name": "monoid_left_identity_lists_parse",
        "source_test": "monoid_left_identity_lists",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 3,
          "entries": [
            {
              "key": "",
              "value": "item1"
            },
            {
              "key": "",
              "value": "item2"
            },
            {
              "key": "",
              "value": "item3"
            }
          ]
        },
        "features": [
          "empty_keys"
        ],
        "functions": [
          "parse"
        ],
        "input": "= item1\n= item2\n= item3",
        "name": "monoid_right_identity_lists_parse",
        "source_test": "monoid_right_identity_lists",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 2,
          "entries": [
            {
              "key": "key",
              "value": "value"
            },
            {
              "key": "another",
              "value": "test"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "key = value\nanother = test",
        "name": "round_trip_property_basic_parse",
        "source_test": "round_trip_property_basic",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1
        },
        "features": [],
        "functions": [
          "round_trip"
        ],
        "input": "key = value\nanother = test",
        "name": "round_trip_property_basic_round_trip",
        "source_test": "round_trip_property_basic",
        "validation": "round_trip",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "config",
              "value": "\n  host = localhost\n  port = 8080\n  db =\n    name = mydb\n    user = admin"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "config =\n  host = localhost\n  port = 8080\n  db =\n    name = mydb\n    user = admin",
        "name": "round_trip_property_nested_parse",
        "source_test": "round_trip_property_nested",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1
        },
        "features": [],
        "functions": [
          "round_trip"
        ],
        "input": "config =\n  host = localhost\n  port = 8080\n  db =\n    name = mydb\n    user = admin",
        "name": "round_trip_property_nested_round_trip",
        "source_test": "round_trip_property_nested",
        "validation": "round_trip",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 4,
          "entries": [
            {
              "key": "",
              "value": "item1"
            },
            {
              "key": "",
              "value": "item2"
            },
            {
              "key": "config",
              "value": "\n  nested =\n    deep = value\n  list =\n    = a\n    = b\n    = c"
            },
            {
              "key": "final",
              "value": "end"
            }
          ]
        },
        "features": [
          "empty_keys"
        ],
        "functions": [
          "parse"
        ],
        "input": "= item1\n= item2\nconfig =\n  nested =\n    deep = value\n  list =\n    = a\n    = b\n    = c\nfinal = end",
        "name": "round_trip_property_complex_parse",
        "source_test": "round_trip_property_complex",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1
        },
        "features": [
          "empty_keys"
        ],
        "functions": [
          "round_trip"
        ],
        "input": "= item1\n= item2\nconfig =\n  nested =\n    deep = value\n  list =\n    = a\n    = b\n    = c\nfinal = end",
        "name": "round_trip_property_complex_round_trip",
        "source_test": "round_trip_property_complex",
        "validation": "round_trip",
        "variants": []
      }
    ],
    "file": "property_algebraic.json"
  },
  {
    "name": "Property Round Trip",
    "description": "property round trip functionality",
    "tests": [
      {
        "behaviors": [],
        "expected": {
          "count": 1
        },
        "features": [],
        "functions": [
          "round_trip"
        ],
        "input": "key = value\nnested =\n  sub = val",
        "name": "round_trip_basic_round_trip",
        "source_test": "round_trip_basic",
        "validation": "round_trip",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "key",
              "value": "value  \n  nested  = \n    sub  =  val"
            }
          ]
        },
        "features": [
          "whitespace"
        ],
        "functions": [
          "parse"
        ],
        "input": "  key  =  value  \n  nested  = \n    sub  =  val  ",
        "name": "round_trip_whitespace_normalization_parse",
        "source_test": "round_trip_whitespace_normalization",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1
        },
        "features": [
          "whitespace"
        ],
        "functions": [
          "round_trip"
        ],
        "input": "  key  =  value  \n  nested  = \n    sub  =  val  ",
        "name": "round_trip_whitespace_normalization_round_trip",
        "source_test": "round_trip_whitespace_normalization",
        "validation": "round_trip",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 3,
          "entries": [
            {
              "key": "",
              "value": "item1"
            },
            {
              "key": "",
              "value": "item2"
            },
            {
              "key": "regular",
              "value": "value"
            }
          ]
        },
        "features": [
          "empty_keys"
        ],
        "functions": [
          "parse"
        ],
        "input": "= item1\n= item2\nregular = value",
        "name": "round_trip_empty_keys_lists_parse",
        "source_test": "round_trip_empty_keys_lists",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1
        },
        "features": [
          "empty_keys"
        ],
        "functions": [
          "round_trip"
        ],
        "input": "= item1\n= item2\nregular = value",
        "name": "round_trip_empty_keys_lists_round_trip",
        "source_test": "round_trip_empty_keys_lists",
        "validation": "round_trip",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "config",
              "value": "\n  host = localhost\n  port = 8080\n  db =\n    name = mydb\n    user = admin"
            }
          ]
        },
        "features": [],
        "functions": [
          "parse"
        ],
        "input": "config =\n  host = localhost\n  port = 8080\n  db =\n    name = mydb\n    user = admin",
        "name": "round_trip_nested_structures_parse",
        "source_test": "round_trip_nested_structures",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1
        },
        "features": [],
        "functions": [
          "round_trip"
        ],
        "input": "config =\n  host = localhost\n  port = 8080\n  db =\n    name = mydb\n    user = admin",
        "name": "round_trip_nested_structures_round_trip",
        "source_test": "round_trip_nested_structures",
        "validation": "round_trip",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "script",
              "value": "\n  #!/bin/bash\n  echo hello\n  exit 0"
            }
          ]
        },
        "features": [
          "multiline"
        ],
        "functions": [
          "parse"
        ],
        "input": "script =\n  #!/bin/bash\n  echo hello\n  exit 0",
        "name": "round_trip_multiline_values_parse",
        "source_test": "round_trip_multiline_values",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1
        },
        "features": [
          "multiline"
        ],
        "functions": [
          "round_trip"
        ],
        "input": "script =\n  #!/bin/bash\n  echo hello\n  exit 0",
        "name": "round_trip_multiline_values_round_trip",
        "source_test": "round_trip_multiline_values",
        "validation": "round_trip",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 5,
          "entries": [
            {
              "key": "name",
              "value": "Alice"
            },
            {
              "key": "",
              "value": "first item"
            },
            {
              "key": "config",
              "value": "\n  port = 3000"
            },
            {
              "key": "",
              "value": "second item"
            },
            {
              "key": "final",
              "value": "value"
            }
          ]
        },
        "features": [
          "empty_keys"
        ],
        "functions": [
          "parse"
        ],
        "input": "name = Alice\n= first item\nconfig =\n  port = 3000\n= second item\nfinal = value",
        "name": "round_trip_mixed_content_parse",
        "source_test": "round_trip_mixed_content",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1
        },
        "features": [
          "empty_keys"
        ],
        "functions": [
          "round_trip"
        ],
        "input": "name = Alice\n= first item\nconfig =\n  port = 3000\n= second item\nfinal = value",
        "name": "round_trip_mixed_content_round_trip",
        "source_test": "round_trip_mixed_content",
        "validation": "round_trip",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "app",
              "value": "\n  = item1\n  config =\n    = nested_item\n    db =\n      host = localhost\n      = db_item\n  = item2"
            }
          ]
        },
        "features": [
          "empty_keys"
        ],
        "functions": [
          "parse"
        ],
        "input": "app =\n  = item1\n  config =\n    = nested_item\n    db =\n      host = localhost\n      = db_item\n  = item2",
        "name": "round_trip_complex_nesting_parse",
        "source_test": "round_trip_complex_nesting",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1
        },
        "features": [
          "empty_keys"
        ],
        "functions": [
          "round_trip"
        ],
        "input": "app =\n  = item1\n  config =\n    = nested_item\n    db =\n      host = localhost\n      = db_item\n  = item2",
        "name": "round_trip_complex_nesting_round_trip",
        "source_test": "round_trip_complex_nesting",
        "validation": "round_trip",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1,
          "entries": [
            {
              "key": "level1",
              "value": "\n  level2 =\n    level3 =\n      level4 =\n        deep = value\n        = deep_item"
            }
          ]
        },
        "features": [
          "empty_keys"
        ],
        "functions": [
          "parse"
        ],
        "input": "level1 =\n  level2 =\n    level3 =\n      level4 =\n        deep = value\n        = deep_item",
        "name": "round_trip_deeply_nested_parse",
        "source_test": "round_trip_deeply_nested",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1
        },
        "features": [
          "empty_keys"
        ],
        "functions": [
          "round_trip"
        ],
        "input": "level1 =\n  level2 =\n    level3 =\n      level4 =\n        deep = value\n        = deep_item",
        "name": "round_trip_deeply_nested_round_trip",
        "source_test": "round_trip_deeply_nested",
        "validation": "round_trip",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 2,
          "entries": [
            {
              "key": "empty_section",
              "value": ""
            },
            {
              "key": "other",
              "value": "value"
            }
          ]
        },
        "features": [
          "empty_keys",
          "multiline"
        ],
        "functions": [
          "parse"
        ],
        "input": "empty_section =\n\nother = value",
        "name": "round_trip_empty_multiline_parse",
        "source_test": "round_trip_empty_multiline",
        "validation": "parse",
        "variants": []
      },
      {
        "behaviors": [],
        "expected": {
          "count": 1
        },
        "features": [
          "empty_keys",
          "multiline"
        ],
        "functions": [
          "round_trip"
        ],
        "input": "empty_section =\n\nother = value",
        "name": "round_trip_empty_multiline_round_trip",
        "source_test": "round_trip_empty_multiline",
        "validation": "round_trip",
        "variants": []
      }
    ],
    "file": "property_round_trip.json"
  }
]