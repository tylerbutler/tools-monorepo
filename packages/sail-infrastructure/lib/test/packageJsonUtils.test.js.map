{"version":3,"file":"packageJsonUtils.test.js","sourceRoot":"","sources":["../../src/test/packageJsonUtils.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { strict as assert } from \"node:assert\";\nimport * as path from \"node:path\";\n\nimport { describe, it } from \"mocha\";\n\nimport {\n\treadPackageJsonAndIndent,\n\tupdatePackageJsonFile,\n\tupdatePackageJsonFileAsync,\n} from \"../packageJsonUtils.js\";\n\nimport { testDataPath } from \"./init.js\";\n\n/**\n * A transformer function that does nothing.\n */\nconst testTransformer = (): void => {\n\t// do nothing\n\treturn;\n};\n\n/**\n * A transformer function that does nothing.\n */\nconst testTransformerAsync = async (): Promise<void> => {\n\t// do nothing\n\treturn;\n};\n\ndescribe(\"readPackageJsonAndIndent\", () => {\n\tit(\"detects spaces indentation\", () => {\n\t\tconst testFile = path.resolve(testDataPath, \"spaces/_package.json\");\n\t\tconst [, indent] = readPackageJsonAndIndent(testFile);\n\t\tconst expectedIndent = \"  \";\n\t\tassert.strictEqual(indent, expectedIndent);\n\t});\n\n\tit(\"detects tabs indentation\", () => {\n\t\tconst testFile = path.resolve(testDataPath, \"tabs/_package.json\");\n\t\tconst [, indent] = readPackageJsonAndIndent(testFile);\n\t\tconst expectedIndent = \"\\t\";\n\t\tassert.strictEqual(indent, expectedIndent);\n\t});\n});\n\ndescribe(\"updatePackageJsonFile\", () => {\n\tit(\"keeps indentation style in file with spaces\", () => {\n\t\tconst testFile = path.resolve(testDataPath, \"spaces/_package.json\");\n\t\tconst expectedIndent = \"  \";\n\t\tupdatePackageJsonFile(testFile, testTransformer);\n\t\tconst [, indent] = readPackageJsonAndIndent(testFile);\n\t\tassert.strictEqual(indent, expectedIndent);\n\t});\n\n\tit(\"keeps indentation style in file with tabs\", () => {\n\t\tconst testFile = path.resolve(testDataPath, \"tabs/_package.json\");\n\t\tconst expectedIndent = \"\\t\";\n\t\tupdatePackageJsonFile(testFile, testTransformer);\n\t\tconst [, indent] = readPackageJsonAndIndent(testFile);\n\t\tassert.strictEqual(indent, expectedIndent);\n\t});\n});\n\ndescribe(\"updatePackageJsonFileAsync\", () => {\n\tit(\"keeps indentation style in file with spaces\", async () => {\n\t\tconst testFile = path.resolve(testDataPath, \"spaces/_package.json\");\n\t\tconst expectedIndent = \"  \";\n\t\tawait updatePackageJsonFileAsync(testFile, testTransformerAsync);\n\t\tconst [, indent] = readPackageJsonAndIndent(testFile);\n\t\tassert.strictEqual(indent, expectedIndent);\n\t});\n\n\tit(\"keeps indentation style in file with tabs\", async () => {\n\t\tconst testFile = path.resolve(testDataPath, \"tabs/_package.json\");\n\t\tconst expectedIndent = \"\\t\";\n\t\tawait updatePackageJsonFileAsync(testFile, testTransformerAsync);\n\t\tconst [, indent] = readPackageJsonAndIndent(testFile);\n\t\tassert.strictEqual(indent, expectedIndent);\n\t});\n});\n"]}