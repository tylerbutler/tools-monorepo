{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,KAAK,IAAI,MAAM,WAAW,CAAC;AAElC;;;;;;;;;;GAUG;AACH,MAAM,UAAU,aAAa,CAC5B,GAAW,EACX,QAAyC;IAEzC,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAC7B,iDAAiD;IACjD,OAAO,IAAI,EAAE,CAAC;QACb,IAAI,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;YACpB,OAAO,IAAI,CAAC;QACb,CAAC;QAED,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACpC,IAAI,EAAE,KAAK,IAAI,EAAE,CAAC;YACjB,MAAM;QACP,CAAC;QACD,IAAI,GAAG,EAAE,CAAC;IACX,CAAC;IAED,OAAO,SAAS,CAAC;AAClB,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,WAAW,CAAC,MAAc,EAAE,UAAkB;IAC7D,MAAM,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC3C,MAAM,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;IAE/C,OAAO,aAAa,CAAC,UAAU,CAAC,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;AAC3D,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport * as path from \"node:path\";\n\n/**\n * Traverses up the directory tree from the given starting directory, applying the callback function to each directory.\n * If the callback returns `true` for any directory, that directory path is returned. If the root directory is reached\n * without the callback returning true, the function returns `undefined`.\n *\n * @param dir - The starting directory.\n * @param callback - A function that will be called for each path. If this function returns true, then the current path\n * will be returned.\n * @returns The first path for which the callback function returns true, or `undefined` if the root path is reached\n * without the callback returning `true`.\n */\nexport function lookUpDirSync(\n\tdir: string,\n\tcallback: (currentDir: string) => boolean,\n): string | undefined {\n\tlet curr = path.resolve(dir);\n\t// eslint-disable-next-line no-constant-condition\n\twhile (true) {\n\t\tif (callback(curr)) {\n\t\t\treturn curr;\n\t\t}\n\n\t\tconst up = path.resolve(curr, \"..\");\n\t\tif (up === curr) {\n\t\t\tbreak;\n\t\t}\n\t\tcurr = up;\n\t}\n\n\treturn undefined;\n}\n\n/**\n * Determines if a path is under a parent path.\n * @param parent - The parent path.\n * @param maybeChild - The child path.\n * @returns `true` if the child is under the parent path, `false` otherwise.\n */\nexport function isPathUnder(parent: string, maybeChild: string): boolean {\n\tconst resolvedPathA = path.resolve(parent);\n\tconst resolvedPathB = path.resolve(maybeChild);\n\n\treturn resolvedPathB.startsWith(resolvedPathA + path.sep);\n}\n"]}