{"version":3,"file":"filter.js","sourceRoot":"","sources":["../src/filter.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport * as path from \"node:path\";\n\nimport mm from \"micromatch\";\n\nimport { getChangedSinceRef, getRemote } from \"./git.js\";\nimport type { IBuildProject, IPackage } from \"./types.js\";\n\nexport const defaultSelectionKinds = [\"dir\", \"all\"] as const;\n\n/**\n * A convenience type representing a glob string.\n */\nexport type GlobString = string;\n\n/**\n * The criteria that should be used for selecting package-like objects from a collection.\n */\nexport interface PackageSelectionCriteria {\n\t/**\n\t * An array of workspaces whose packages are selected. All packages in the workspace _except_ the root package\n\t * will be selected. To include workspace roots, use the `workspaceRoots` property.\n\t *\n\t * Values should either be complete workspace names or micromatch glob strings. To select all workspaces, use `\"*\"`.\n\t * See https://www.npmjs.com/package/micromatch?activeTab=readme#extended-globbing for more details.\n\t *\n\t * Workspace names will be compared against all globs - if any match, the workspace will be selected.\n\t */\n\tworkspaces: (GlobString | string)[];\n\n\t/**\n\t * An array of workspaces whose root packages are selected. Only the roots of each workspace will be included.\n\t *\n\t * Values should either be complete workspace names or micromatch glob strings. To select all workspaces, use `\"*\"`.\n\t * See https://www.npmjs.com/package/micromatch?activeTab=readme#extended-globbing for more details.\n\t *\n\t * Workspace names will be compared against all globs - if any match, the workspace will be selected.\n\t */\n\tworkspaceRoots: (GlobString | string)[];\n\n\t/**\n\t * An array of release groups whose packages are selected. All packages in the release group _except_ the root package\n\t * will be selected. To include release group roots, use the `releaseGroupRoots` property.\n\t *\n\t * Values should either be complete release group names or micromatch glob strings. To select all release groups, use\n\t * `\"*\"`. See https://www.npmjs.com/package/micromatch?activeTab=readme#extended-globbing for more details.\n\t *\n\t * Workspace names will be compared against all globs - if any match, the workspace will be selected.\n\t */\n\treleaseGroups: (GlobString | string)[];\n\n\t/**\n\t * An array of release groups whose root packages are selected. Only the roots of each release group will be included.\n\t * Rootless release groups will never be selected with this criteria.\n\t *\n\t * The reserved string \"\\*\" will select all packages when included in one of the criteria. If used, the \"\\*\" value is\n\t * expected to be the only item in the selection array.\n\t */\n\treleaseGroupRoots: (GlobString | string)[];\n\n\t/**\n\t * If set, only selects the single package in this directory.\n\t */\n\tdirectory?: string | undefined;\n\n\t/**\n\t * If set, only selects packages that have changes when compared with the branch of this name.\n\t */\n\tchangedSinceBranch?: string | undefined;\n}\n\n/**\n * A pre-defined {@link PackageSelectionCriteria} that selects all packages.\n */\nexport const AllPackagesSelectionCriteria: PackageSelectionCriteria = {\n\tworkspaces: [\"*\"],\n\tworkspaceRoots: [\"*\"],\n\treleaseGroups: [],\n\treleaseGroupRoots: [],\n\tdirectory: undefined,\n\tchangedSinceBranch: undefined,\n} as const;\n\n/**\n * An empty {@link PackageSelectionCriteria} that selects no packages.\n */\nexport const EmptySelectionCriteria: PackageSelectionCriteria = {\n\tworkspaces: [],\n\tworkspaceRoots: [],\n\treleaseGroups: [],\n\treleaseGroupRoots: [],\n\tdirectory: undefined,\n\tchangedSinceBranch: undefined,\n} as const;\n\n/**\n * The criteria that should be used for filtering package-like objects from a collection.\n */\nexport interface PackageFilterOptions {\n\t/**\n\t * If set, filters IN packages whose scope matches the strings provided.\n\t */\n\tscope?: string[] | undefined;\n\n\t/**\n\t * If set, filters OUT packages whose scope matches the strings provided.\n\t */\n\tskipScope?: string[] | undefined;\n\n\t/**\n\t * If set, filters private packages in/out.\n\t */\n\tprivate: boolean | undefined;\n}\n\n/**\n * Selects packages from a BuildProject based on the selection criteria.\n *\n * @param buildProject - The BuildProject to select from.\n * @param selection - The selection criteria to use to select packages.\n * @returns A `Set` containing the selected packages.\n */\nconst selectPackagesFromRepo = async <P extends IPackage>(\n\tbuildProject: IBuildProject<P>,\n\tselection: PackageSelectionCriteria,\n): Promise<Set<P>> => {\n\tconst selected: Set<P> = new Set();\n\n\tif (selection.changedSinceBranch !== undefined) {\n\t\tconst git = await buildProject.getGitRepository();\n\t\tconst remote = await getRemote(git, buildProject.upstreamRemotePartialUrl);\n\t\tif (remote === undefined) {\n\t\t\tthrow new Error(`Can't find a remote with ${buildProject.upstreamRemotePartialUrl}`);\n\t\t}\n\t\tconst { packages } = await getChangedSinceRef(\n\t\t\tbuildProject,\n\t\t\tselection.changedSinceBranch,\n\t\t\tremote,\n\t\t);\n\t\taddAllToSet(selected, packages);\n\t}\n\n\tif (selection.directory !== undefined) {\n\t\tconst selectedAbsolutePath = path.join(\n\t\t\tselection.directory === \".\"\n\t\t\t\t? process.cwd()\n\t\t\t\t: path.resolve(buildProject.root, selection.directory),\n\t\t);\n\n\t\tconst dirPackage = [...buildProject.packages.values()].find(\n\t\t\t(p) => p.directory === selectedAbsolutePath,\n\t\t);\n\t\tif (dirPackage === undefined) {\n\t\t\tthrow new Error(`Cannot find package with directory: ${selectedAbsolutePath}`);\n\t\t}\n\t\tselected.add(dirPackage);\n\t\treturn selected;\n\t}\n\n\t// Select workspace and workspace root packages\n\tfor (const workspace of buildProject.workspaces.values()) {\n\t\tif (selection.workspaces.length > 0 && mm.isMatch(workspace.name, selection.workspaces)) {\n\t\t\taddAllToSet(\n\t\t\t\tselected,\n\t\t\t\tworkspace.packages.filter((p) => !p.isWorkspaceRoot),\n\t\t\t);\n\t\t}\n\n\t\tif (\n\t\t\tselection.workspaceRoots.length > 0 &&\n\t\t\tmm.isMatch(workspace.name, selection.workspaceRoots)\n\t\t) {\n\t\t\taddAllToSet(\n\t\t\t\tselected,\n\t\t\t\tworkspace.packages.filter((p) => p.isWorkspaceRoot),\n\t\t\t);\n\t\t}\n\t}\n\n\t// Select release group and release group root packages\n\tfor (const releaseGroup of buildProject.releaseGroups.values()) {\n\t\tif (\n\t\t\tselection.releaseGroups.length > 0 &&\n\t\t\tmm.isMatch(releaseGroup.name, selection.releaseGroups)\n\t\t) {\n\t\t\taddAllToSet(\n\t\t\t\tselected,\n\t\t\t\treleaseGroup.packages.filter((p) => !p.isReleaseGroupRoot),\n\t\t\t);\n\t\t}\n\n\t\tif (\n\t\t\tselection.releaseGroupRoots.length > 0 &&\n\t\t\tmm.isMatch(releaseGroup.name, selection.releaseGroupRoots)\n\t\t) {\n\t\t\taddAllToSet(\n\t\t\t\tselected,\n\t\t\t\treleaseGroup.packages.filter((p) => p.isReleaseGroupRoot),\n\t\t\t);\n\t\t}\n\t}\n\n\treturn selected;\n};\n\n/**\n * Selects packages from the BuildProject based on the selection criteria. The selected packages will be filtered by the\n * filter criteria if provided.\n *\n * @param buildProject - The BuildProject.\n * @param selection - The selection criteria to use to select packages.\n * @param filter - An optional filter criteria to filter selected packages by.\n * @returns An object containing the selected packages and the filtered packages.\n */\nexport async function selectAndFilterPackages<P extends IPackage>(\n\tbuildProject: IBuildProject<P>,\n\tselection: PackageSelectionCriteria,\n\tfilter?: PackageFilterOptions,\n): Promise<{ selected: P[]; filtered: P[] }> {\n\t// Select the packages from the repo\n\tconst selected = [...(await selectPackagesFromRepo<P>(buildProject, selection))];\n\n\t// Filter resulting list if needed\n\tconst filtered = filter === undefined ? selected : await filterPackages(selected, filter);\n\n\treturn { selected, filtered };\n}\n\n/**\n * Convenience type that contains only the properties of a package that are needed for filtering.\n */\nexport interface FilterablePackage {\n\tname: string;\n\tprivate?: boolean | undefined;\n}\n\n/**\n * Filters a list of packages by the filter criteria.\n *\n * @param packages - An array of packages to be filtered.\n * @param filters - The filter criteria to filter the packages by.\n * @typeParam T - The type of the package-like objects being filtered.\n * @returns An array containing only the filtered items.\n */\nexport async function filterPackages<T extends FilterablePackage>(\n\tpackages: T[],\n\tfilters: PackageFilterOptions,\n): Promise<T[]> {\n\tconst filtered = packages.filter((pkg) => {\n\t\tif (filters === undefined) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst isPrivate: boolean = pkg.private ?? false;\n\t\tif (filters.private !== undefined && filters.private !== isPrivate) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst scopeIn = scopesToPrefix(filters?.scope);\n\t\tconst scopeOut = scopesToPrefix(filters?.skipScope);\n\n\t\tif (scopeIn !== undefined) {\n\t\t\tlet found = false;\n\t\t\tfor (const scope of scopeIn) {\n\t\t\t\tfound ||= pkg.name.startsWith(scope);\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (scopeOut !== undefined) {\n\t\t\tfor (const scope of scopeOut) {\n\t\t\t\tif (pkg.name.startsWith(scope) === true) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t});\n\n\treturn filtered;\n}\n\nfunction scopesToPrefix(scopes: string[] | undefined): string[] | undefined {\n\treturn scopes === undefined ? undefined : scopes.map((s) => `${s}/`);\n}\n\n/**\n * Adds all the items of an iterable to a set.\n *\n * @param set - The set to which items will be added.\n * @param iterable - The iterable containing items to add to the set.\n */\nexport function addAllToSet<T>(set: Set<T>, iterable: Iterable<T>): void {\n\tfor (const item of iterable) {\n\t\tset.add(item);\n\t}\n}\n"]}