{"version":3,"file":"buildProject.js","sourceRoot":"","sources":["../src/buildProject.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport * as path from \"node:path\";\n\nimport { type SimpleGit, simpleGit } from \"simple-git\";\nimport { globSync } from \"tinyglobby\";\n\nimport {\n\ttype BuildProjectConfig,\n\ttype BuildProjectConfigV2,\n\ttype ReleaseGroupDefinition,\n\tgetBuildProjectConfig,\n\tisV1Config,\n\tisV2Config,\n} from \"./config.js\";\nimport { NotInGitRepository } from \"./errors.js\";\nimport { findGitRootSync } from \"./git.js\";\nimport type {\n\tIBuildProject,\n\tIPackage,\n\tIReleaseGroup,\n\tIWorkspace,\n\tPackageName,\n\tReleaseGroupName,\n\tWorkspaceName,\n} from \"./types.js\";\nimport { Workspace } from \"./workspace.js\";\nimport { loadWorkspacesFromLegacyConfig } from \"./workspaceCompat.js\";\nimport { WriteOnceMap } from \"./writeOnceMap.js\";\n\n/**\n * {@inheritDoc IBuildProject}\n */\nexport class BuildProject<P extends IPackage> implements IBuildProject<P> {\n\t/**\n\t * The absolute path to the root of the build project. This is the path where the config file is located, if one\n\t * exists.\n\t */\n\tpublic readonly root: string;\n\n\t/**\n\t * {@inheritDoc IBuildProject.configuration}\n\t */\n\tpublic readonly configuration: BuildProjectConfig;\n\n\tpublic readonly configurationSource: string;\n\n\t/**\n\t * The absolute path to the config file.\n\t */\n\tprivate readonly configFilePath: string;\n\n\t/**\n\t * @param searchPath - The path that should be searched for a BuildProject config file.\n\t * @param infer - Set to true to always infer the build project config.\n\t * @param gitRepository - A SimpleGit instance rooted in the root of the Git repository housing the BuildProject. This\n\t * should be set to false if the BuildProject is not within a Git repository.\n\t */\n\tpublic constructor(\n\t\tsearchPath: string,\n\t\tinfer = false,\n\n\t\t/**\n\t\t * {@inheritDoc IBuildProject.upstreamRemotePartialUrl}\n\t\t */\n\t\tpublic readonly upstreamRemotePartialUrl?: string,\n\t) {\n\t\t// Handle configuration\n\t\tif (infer) {\n\t\t\tthis.configuration = generateBuildProjectConfig(searchPath);\n\t\t\tthis.configFilePath = searchPath;\n\t\t\tthis.configurationSource = \"INFERRED\";\n\t\t\tthis.root = searchPath;\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tconst { config, configFilePath } = getBuildProjectConfig(searchPath);\n\t\t\t\tthis.configuration = config;\n\t\t\t\tthis.configFilePath = configFilePath;\n\t\t\t\tthis.configurationSource = configFilePath;\n\t\t\t\tthis.root = path.resolve(path.dirname(configFilePath));\n\t\t\t} catch {\n\t\t\t\tthis.configuration = generateBuildProjectConfig(searchPath);\n\t\t\t\tthis.configFilePath = searchPath;\n\t\t\t\tthis.configurationSource = \"INFERRED\";\n\t\t\t\tthis.root = searchPath;\n\t\t\t}\n\t\t}\n\n\t\tif (isV2Config(this.configuration) && this.configuration.excludeGlobs !== undefined) {\n\t\t\t// TODO: refactor and consolidate all this logic. Maybe a single function that take a BuildProjectConfig and\n\t\t\t// returns all the class properties that are set in these blocks. Then we can just set it once and move the logic\n\t\t\t// to a function.\n\t\t\tthis.configuration = generateBuildProjectConfig(searchPath);\n\t\t\tthis.configFilePath = searchPath;\n\t\t\tthis.configurationSource = \"INFERRED\";\n\t\t\tthis.root = searchPath;\n\t\t} else if (\n\t\t\t(this.configuration.buildProject ?? this.configuration.repoPackages) === undefined\n\t\t) {\n\t\t\tthis.configuration = generateBuildProjectConfig(searchPath);\n\t\t\tthis.configFilePath = searchPath;\n\t\t\tthis.configurationSource = \"INFERRED\";\n\t\t\tthis.root = searchPath;\n\t\t}\n\n\t\t// This will load both v1 and v2 configs with the buildProject setting.\n\t\tif (this.configuration.buildProject !== undefined) {\n\t\t\tthis._workspaces = new WriteOnceMap<WorkspaceName, IWorkspace>(\n\t\t\t\tObject.entries(this.configuration.buildProject.workspaces).map((entry) => {\n\t\t\t\t\tconst name = entry[0] as WorkspaceName;\n\t\t\t\t\tconst definition = entry[1];\n\t\t\t\t\tconst ws = Workspace.load(name, definition, this.root, this);\n\t\t\t\t\treturn [name, ws];\n\t\t\t\t}),\n\t\t\t);\n\t\t} else if (\n\t\t\tisV1Config(this.configuration) &&\n\t\t\tthis.configuration.repoPackages !== undefined\n\t\t) {\n\t\t\tconsole.warn(\n\t\t\t\t`The repoPackages setting is deprecated and will no longer be read in a future version. Use buildProject instead.`,\n\t\t\t);\n\t\t\tthis._workspaces = loadWorkspacesFromLegacyConfig(this.configuration.repoPackages, this);\n\t\t} else {\n\t\t\t// this._workspaces = this.configuration.buildProject.workspaces;\n\t\t\tthrow new Error(\"Error loading/generating configuration.\");\n\t\t}\n\n\t\tconst releaseGroups = new Map<ReleaseGroupName, IReleaseGroup>();\n\t\tfor (const ws of this.workspaces.values()) {\n\t\t\tfor (const [rgName, rg] of ws.releaseGroups) {\n\t\t\t\tif (releaseGroups.has(rgName)) {\n\t\t\t\t\tthrow new Error(`Duplicate release group: ${rgName}`);\n\t\t\t\t}\n\t\t\t\treleaseGroups.set(rgName, rg);\n\t\t\t}\n\t\t}\n\t\tthis._releaseGroups = releaseGroups;\n\t}\n\n\tprivate readonly _workspaces: Map<WorkspaceName, IWorkspace>;\n\n\t/**\n\t * {@inheritDoc IBuildProject.workspaces}\n\t */\n\tpublic get workspaces(): Map<WorkspaceName, IWorkspace> {\n\t\treturn this._workspaces;\n\t}\n\n\tprivate readonly _releaseGroups: Map<ReleaseGroupName, IReleaseGroup>;\n\n\t/**\n\t * {@inheritDoc IBuildProject.releaseGroups}\n\t */\n\tpublic get releaseGroups(): Map<ReleaseGroupName, IReleaseGroup> {\n\t\treturn this._releaseGroups;\n\t}\n\n\tprivate _packages: WriteOnceMap<PackageName, P> = new WriteOnceMap();\n\n\t/**\n\t * {@inheritDoc IBuildProject.packages}\n\t */\n\tpublic get packages(): ReadonlyMap<PackageName, P> {\n\t\tif(this._packages.size === 0) {\n\t\t\tfor (const ws of this.workspaces.values()) {\n\t\t\t\tfor (const pkg of ws.packages) {\n\t\t\t\t\tthis._packages.set(pkg.name, pkg as P);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this._packages;\n\t}\n\n\t/**\n\t * {@inheritDoc IBuildProject.relativeToRepo}\n\t */\n\tpublic relativeToRepo(p: string): string {\n\t\t// Replace \\ in result with / in case OS is Windows.\n\t\treturn path.relative(this.root, p).replace(/\\\\/g, \"/\");\n\t}\n\n\t/**\n\t * Reload the BuildProject by calling `reload` on each workspace in the repository.\n\t */\n\tpublic reload(): void {\n\t\tfor (const ws of this.workspaces.values()) {\n\t\t\tws.reload();\n\t\t}\n\t}\n\n\tprivate gitRepository: SimpleGit | undefined;\n\tprivate _checkedForGitRepo = false;\n\n\t/**\n\t * {@inheritDoc IBuildProject.getGitRepository}\n\t */\n\tpublic async getGitRepository(): Promise<Readonly<SimpleGit>> {\n\t\tif (this.gitRepository !== undefined) {\n\t\t\treturn this.gitRepository;\n\t\t}\n\n\t\tif (this._checkedForGitRepo === false) {\n\t\t\tthis._checkedForGitRepo = true;\n\t\t\t// Check if the path is within a Git repo by trying to find the path to the Git repo root. If not within a git\n\t\t\t// repo, this call will throw a `NotInGitRepository` error.\n\t\t\tconst gitRoot = findGitRootSync(this.root);\n\t\t\tthis.gitRepository = simpleGit(gitRoot);\n\t\t\treturn this.gitRepository;\n\t\t}\n\n\t\tthrow new NotInGitRepository(this.root);\n\t}\n\n\t/**\n\t * {@inheritDoc IBuildProject.getPackageReleaseGroup}\n\t */\n\tpublic getPackageReleaseGroup(pkg: Readonly<P>): Readonly<IReleaseGroup> {\n\t\tconst found = this.releaseGroups.get(pkg.releaseGroup);\n\t\tif (found === undefined) {\n\t\t\tthrow new Error(`Cannot find release group for package: ${pkg}`);\n\t\t}\n\n\t\treturn found;\n\t}\n}\n\n/**\n * Generates a BuildProjectConfig by searching searchPath and below for workspaces. If any workspaces are found, they're\n * automatically added to the config, and a single release group is created within the workspace. Both the workspace and\n * the release group will be named the \"basename\" of the workspace path.\n *\n * Generated configs use the latest config version.\n */\nexport function generateBuildProjectConfig(searchPath: string): BuildProjectConfigV2 {\n\tconst toReturn: BuildProjectConfigV2 = {\n\t\tversion: 2,\n\t\tbuildProject: {\n\t\t\tworkspaces: {},\n\t\t},\n\t};\n\n\t// Find workspace roots based on lockfiles\n\tconst lockfilePaths = globSync(\n\t\t[\n\t\t\t\"package-lock.json\",\n\t\t\t\"pnpm-lock.yaml\",\n\t\t\t\"bun.lock\",\n\t\t\t\"bun.lockb\",\n\t\t\t\"deno.lock\",\n\t\t\t\"yarn.lock\",\n\t\t].map((lockfile) => `**/${lockfile}`),\n\t\t{\n\t\t\tcwd: searchPath,\n\t\t\tignore: [\"**/node_modules/**\"],\n\t\t\tonlyFiles: true,\n\t\t\tabsolute: true,\n\t\t},\n\t);\n\n\tconst workspaceRoots = new Set(lockfilePaths.map((p) => path.dirname(p)));\n\tif (toReturn.buildProject === undefined) {\n\t\tthrow new Error(\"Unexpected error loading config-less build project.\");\n\t}\n\n\t// const workspaces: Map<string, string> = new Map();\n\tfor (const workspaceRootPath of workspaceRoots) {\n\t\tconst wsName = path.basename(workspaceRootPath);\n\t\t// workspaces.set(wsName, workspaceRootPath);\n\n\t\ttoReturn.buildProject.workspaces[wsName] = {\n\t\t\tdirectory: workspaceRootPath,\n\t\t\treleaseGroups: makeReleaseGroupDefinitionEntry(wsName),\n\t\t};\n\t}\n\n\treturn toReturn;\n}\n\nfunction makeReleaseGroupDefinitionEntry(\n\tname: string,\n): Record<string, ReleaseGroupDefinition> {\n\tconst entry: Record<string, ReleaseGroupDefinition> = {};\n\tentry[name] = {\n\t\t// include all packages\n\t\tinclude: [\"*\"],\n\t};\n\treturn entry;\n}\n\n/**\n * Searches for a BuildProject config file and loads the project from the config if found.\n *\n * @typeParam P - The type to use for Packages.\n * @param searchPath - The path to start searching for a BuildProject config.\n * @param infer - Set to true to always infer the build project config.\n * @param upstreamRemotePartialUrl - A partial URL to the upstream repo. This is used to find the local git remote that\n * corresponds to the upstream repo.\n * @returns The loaded BuildProject.\n */\nexport function loadBuildProject<P extends IPackage>(\n\tsearchPath: string,\n\tinfer = false,\n\tupstreamRemotePartialUrl?: string,\n): IBuildProject<P> {\n\tconst repo = new BuildProject<P>(searchPath, infer, upstreamRemotePartialUrl);\n\treturn repo;\n}\n\n// export function loadBuildProjectFromConfig<P extends IPackage>(\n// \tconfig: BuildProjectConfig,\n// \tupstreamRemotePartialUrl?: string,\n// ): IBuildProject<P> {\n// \tconst repo = new BuildProject<P>(searchPath, infer, upstreamRemotePartialUrl);\n// \treturn repo;\n// }\n\n/**\n * Returns an object containing all the packages, release groups, and workspaces that a given set of packages depends\n * on. This function only considers packages in the BuildProject repo.\n */\nexport function getAllDependencies(\n\trepo: IBuildProject,\n\tpackages: IPackage[],\n): { packages: IPackage[]; releaseGroups: IReleaseGroup[]; workspaces: IWorkspace[] } {\n\tconst dependencyPackages: Set<IPackage> = new Set();\n\tconst releaseGroups: Set<IReleaseGroup> = new Set();\n\tconst workspaces: Set<IWorkspace> = new Set();\n\n\tfor (const pkg of packages) {\n\t\tfor (const { name } of pkg.combinedDependencies) {\n\t\t\tconst depPackage = repo.packages.get(name);\n\t\t\tif (depPackage === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (pkg.releaseGroup !== depPackage.releaseGroup) {\n\t\t\t\tdependencyPackages.add(depPackage);\n\t\t\t\treleaseGroups.add(repo.getPackageReleaseGroup(depPackage));\n\n\t\t\t\tif (pkg.workspace !== depPackage.workspace) {\n\t\t\t\t\tworkspaces.add(depPackage.workspace);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {\n\t\tpackages: [...dependencyPackages],\n\t\treleaseGroups: [...releaseGroups],\n\t\tworkspaces: [...workspaces],\n\t};\n}\n"]}