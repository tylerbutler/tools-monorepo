{"version":3,"file":"packageManagers.js","sourceRoot":"","sources":["../src/packageManagers.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,EAAE,UAAU,EAAE,MAAM,0BAA0B,CAAC;AACtD,sDAAsD;AACtD,OAAO,EAAE,cAAc,EAAE,MAAM,mCAAmC,CAAC;AAQnE,MAAM,WAAW,GAAG,IAAI,GAAG,CAA+B;IACzD,CAAC,KAAK,EAAE,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;IAClC,CAAC,MAAM,EAAE,CAAC,WAAW,CAAC,CAAC;IACvB,CAAC,KAAK,EAAE,CAAC,mBAAmB,CAAC,CAAC;IAC9B,CAAC,MAAM,EAAE,CAAC,gBAAgB,CAAC,CAAC;IAC5B,CAAC,MAAM,EAAE,CAAC,WAAW,CAAC,CAAC;CACvB,CAAC,CAAC;AAEH,MAAM,OAAO,cAAc;IAMT;IACC;IANlB;;;OAGG;IACH,YACiB,IAAwB,EACvB,WAAsC;QADvC,SAAI,GAAJ,IAAI,CAAoB;QACvB,gBAAW,GAAX,WAAW,CAA2B;QAEvD,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;YACzB,MAAM,IAAI,KAAK,CAAC,4CAA4C,IAAI,GAAG,CAAC,CAAC;QACtE,CAAC;QACD,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IAC5B,CAAC;IAEe,aAAa,CAAW;IAExC;;OAEG;IACI,yBAAyB,CAAC,cAAuB;QACvD,MAAM,eAAe,GAAG,cAAc,CACrC,IAAI,CAAC,WAAW,EAChB,cAAc,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ,EACrC,EAAE,CACF,CAAC;QAEF,IAAI,eAAe,KAAK,IAAI,EAAE,CAAC;YAC9B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC5C,CAAC;QACD,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,eAAe,CAAC;QAC1C,OAAO,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;IAC3B,CAAC;CACD;AAED;;GAEG;AACH,MAAM,UAAU,oBAAoB,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE;IACvD,MAAM,MAAM,GAAG,UAAU,CAAC;QACzB,GAAG;QACH,SAAS,EAAE,CAAC,EAAE,EAAE,EAAE;YACjB,MAAM,IAAI,KAAK,CAAC,4BAA4B,EAAE,EAAE,CAAC,CAAC;QACnD,CAAC;KACD,CAAC,CAAC;IAEH,IAAI,MAAM,KAAK,IAAI,EAAE,CAAC;QACrB,MAAM,IAAI,KAAK,CAAC,8DAA8D,GAAG,IAAI,CAAC,CAAC;IACxF,CAAC;IAED,OAAO,IAAI,cAAc,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;AACtD,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { detectSync } from \"package-manager-detector\";\n// eslint-disable-next-line import/no-internal-modules\nimport { resolveCommand } from \"package-manager-detector/commands\";\n\nimport type {\n\tIPackageManager,\n\tPackageManagerInstallName,\n\tPackageManagerName,\n} from \"./types.js\";\n\nconst lockFileMap = new Map<PackageManagerName, string[]>([\n\t[\"bun\", [\"bun.lock\", \"bun.lockb\"]],\n\t[\"deno\", [\"deno.lock\"]],\n\t[\"npm\", [\"package-lock.json\"]],\n\t[\"pnpm\", [\"pnpm-lock.yaml\"]],\n\t[\"yarn\", [\"yarn.lock\"]],\n]);\n\nexport class PackageManager implements IPackageManager {\n\t/**\n\t * Instantiates a new package manager object. Prefer the {@link createPackageManager} function, which retuns an\n\t * {@link IPackageManager}, to calling the constructor directly.\n\t */\n\tpublic constructor(\n\t\tpublic readonly name: PackageManagerName,\n\t\tprivate readonly installName: PackageManagerInstallName,\n\t) {\n\t\tconst entry = lockFileMap.get(name);\n\t\tif (entry === undefined) {\n\t\t\tthrow new Error(`Lockfiles not known for package manager \"${name}\"`);\n\t\t}\n\t\tthis.lockfileNames = entry;\n\t}\n\n\tpublic readonly lockfileNames: string[];\n\n\t/**\n\t * {@inheritdoc IPackageManager.getInstallCommandWithArgs}\n\t */\n\tpublic getInstallCommandWithArgs(updateLockfile: boolean): string[] {\n\t\tconst resolvedCommand = resolveCommand(\n\t\t\tthis.installName,\n\t\t\tupdateLockfile ? \"install\" : \"frozen\",\n\t\t\t[],\n\t\t);\n\n\t\tif (resolvedCommand === null) {\n\t\t\tthrow new Error(\"Cannot generate command\");\n\t\t}\n\t\tconst { command, args } = resolvedCommand;\n\t\treturn [command, ...args];\n\t}\n}\n\n/**\n * Create a new package manager instance.\n */\nexport function detectPackageManager(cwd = process.cwd()): IPackageManager {\n\tconst result = detectSync({\n\t\tcwd,\n\t\tonUnknown: (pm) => {\n\t\t\tthrow new Error(`Unknown package manager: ${pm}`);\n\t\t},\n\t});\n\n\tif (result === null) {\n\t\tthrow new Error(`Package manager could not be detected. Started looking at '${cwd}'.`);\n\t}\n\n\treturn new PackageManager(result.name, result.agent);\n}\n"]}