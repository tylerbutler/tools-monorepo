{"version":3,"file":"config.js","sourceRoot":"","sources":["../src/config.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { cosmiconfigSync } from \"cosmiconfig\";\n\nimport {\n\ttype IPackage,\n\ttype PackageName,\n\ttype ReleaseGroupName,\n\tisIPackage,\n} from \"./types.js\";\nimport type { RequireExactlyOne } from \"type-fest\";\n\n/**\n * The minimum version of the BuildProject configuration currently supported.\n */\nexport const BUILDPROJECT_CONFIG_MIN_VERSION = 1;\n\nexport type BuildProjectConfig = BuildProjectConfigV1 | BuildProjectConfigV2;\n\n/**\n * Top-most configuration for BuildProject settings.\n */\nexport interface BuildProjectConfigBase {\n\t/**\n\t * The version of the config.\n\t */\n\tversion: number;\n\n\t/**\n\t * The layout of the build project into workspaces and release groups.\n\t */\n\tbuildProject?: {\n\t\tworkspaces: {\n\t\t\t/**\n\t\t\t * A mapping of workspace name to folder containing a workspace config file (e.g. pnpm-workspace.yaml).\n\t\t\t */\n\t\t\t[name: string]: WorkspaceDefinition;\n\t\t};\n\t};\n}\n\nexport interface BuildProjectConfigV1 extends BuildProjectConfigBase {\n\t/**\n\t * The version of the config.\n\t */\n\tversion: 1;\n\n\t/**\n\t * **BACK-COMPAT ONLY**\n\t *\n\t * A mapping of package or release group names to metadata about the package or release group.\n\t *\n\t * @deprecated Use the buildProject property instead.\n\t */\n\trepoPackages?: IFluidBuildDirs;\n}\n\ninterface BuildProjectConfigV2Base extends Partial<BuildProjectConfigBase> {\n\t/**\n\t * The version of the config.\n\t */\n\tversion: 2;\n\n\t/**\n\t * An array of glob strings. Any paths that match at least on of these globs will be excluded from the build project.\n\t * This setting is helpful if you need to exclude workspaces that are used for testing or that are not yet managed by\n\t * sail.\n\t */\n\texcludeGlobs: string[];\n}\n\n/**\n * Type guard to check if the input is a BuildProjectConfigV1.\n *\n * @param input - The input to check.\n * @returns `true` if the input is a BuildProjectConfigV1; `false` otherwise.\n */\nexport function isV1Config(input: BuildProjectConfig): input is BuildProjectConfigV1 {\n\treturn input.version === 1;\n}\n\nexport type BuildProjectConfigV2 = RequireExactlyOne<\n\tBuildProjectConfigV2Base,\n\t\"excludeGlobs\" | \"buildProject\"\n>;\n\n/**\n * Type guard to check if the input is a BuildProjectConfigV2.\n *\n * @param input - The input to check.\n * @returns `true` if the input is a BuildProjectConfigV2; `false` otherwise.\n */\nexport function isV2Config(input: BuildProjectConfig): input is BuildProjectConfigV2 {\n\treturn input.version === 2;\n}\n\n/**\n * The definition of a workspace in configuration.\n */\nexport interface WorkspaceDefinition {\n\t/**\n\t * The root directory of the workspace. This folder should contain a workspace config file (e.g. pnpm-workspace.yaml).\n\t */\n\tdirectory: string;\n\n\t/**\n\t * Definitions of the release groups within the workspace.\n\t */\n\treleaseGroups: {\n\t\t/**\n\t\t * A mapping of release group name to a definition for the release group.\n\t\t */\n\t\t[name: string]: ReleaseGroupDefinition;\n\t};\n}\n\n/**\n * The definition of a release group ih configuration.\n */\nexport interface ReleaseGroupDefinition {\n\t/**\n\t * An array of scopes or package names that should be included in the release group. Each package must\n\t * belong to a single release group.\n\t *\n\t * To include all packages, set this value to a single element: `[\"*\"]`.\n\t */\n\tinclude: string[];\n\n\t/**\n\t * An array of scopes or package names that should be excluded. Exclusions are applied AFTER inclusions, so\n\t * this can be used to exclude specific packages in a certain scope.\n\t */\n\texclude?: string[];\n\n\t/**\n\t * The name of the package that should be considered the root package for the release group. If not provided, the\n\t * release group is considered \"rootless.\"\n\t *\n\t * @remarks\n\t *\n\t * A release group may have a \"root package\" that is part of the workspace but fills a similar role to the\n\t * workspace-root package: it is a convenient place to store release-group-wide scripts as opposed to workspace-wide\n\t * scripts.\n\t */\n\trootPackageName?: string;\n\n\t/**\n\t * A URL to the ADO CI pipeline that builds the release group.\n\t */\n\tadoPipelineUrl?: string;\n}\n\n/**\n * @deprecated Use buildProject and associated types instead.\n */\nexport interface IFluidBuildDirs {\n\t[name: string]: IFluidBuildDirEntry;\n}\n\n/**\n * @deprecated Use buildProject and associated types instead.\n */\nexport type IFluidBuildDirEntry = string | IFluidBuildDir | (string | IFluidBuildDir)[];\n\n/**\n * Configures a package or release group\n *\n * @deprecated Use buildProject and associated types instead.\n */\nexport interface IFluidBuildDir {\n\t/**\n\t * The path to the package. For release groups this should be the path to the root of the release group.\n\t */\n\tdirectory: string;\n\n\t/**\n\t * An array of paths under `directory` that should be ignored.\n\t *\n\t * @deprecated This field is unused in all known configs and is ignored by the back-compat loading code.\n\t */\n\tignoredDirs?: string[];\n}\n\n/**\n * Checks if a package matches a given {@link ReleaseGroupDefinition}.\n *\n * @returns `true` if the package matches the release group definition; `false` otherwise.\n */\nexport function matchesReleaseGroupDefinition(\n\tpkg: IPackage | PackageName,\n\t{ include, exclude, rootPackageName }: ReleaseGroupDefinition,\n): boolean {\n\tconst name = isIPackage(pkg) ? pkg.name : pkg;\n\tlet shouldInclude = false;\n\n\tif (\n\t\t// Special case: an include value with a single element, \"*\", should include all packages.\n\t\t(include.length === 1 && include[0] === \"*\") ||\n\t\t// If the package name matches an entry in the include list, it should be included\n\t\tinclude.includes(name) ||\n\t\t// If the package name starts with any of the include list entries, it should be included\n\t\tinclude.some((scope) => name.startsWith(scope))\n\t) {\n\t\tshouldInclude = true;\n\t}\n\n\tconst shouldExclude = exclude?.includes(name) ?? false;\n\treturn (\n\t\t(shouldInclude && !shouldExclude) ||\n\t\t// If the package name matches the root name, it's definitely part of the release group.\n\t\tname === rootPackageName\n\t);\n}\n\n/**\n * Finds the name of the release group that a package belongs to based on the release group configuration within a\n * workspace.\n *\n * @param pkg - The package for which to find a release group.\n * @param definition - The \"releaseGroups\" config from the RepoLayout configuration.\n * @returns The name of the package's release group.\n */\nexport function findReleaseGroupForPackage(\n\tpkg: IPackage | PackageName,\n\tdefinition: Exclude<WorkspaceDefinition[\"releaseGroups\"], undefined>,\n): ReleaseGroupName | undefined {\n\tfor (const [rgName, def] of Object.entries(definition)) {\n\t\tif (matchesReleaseGroupDefinition(pkg, def)) {\n\t\t\treturn rgName as ReleaseGroupName;\n\t\t}\n\t}\n}\n\nconst configName = \"buildProject\";\n\n/**\n * A cosmiconfig explorer to find the buildProject config. First looks for JavaScript config files and falls back to the\n * `buildProject` property in package.json. We create a single explorer here because cosmiconfig internally caches\n * configs for performance. The cache is per-explorer, so re-using the same explorer is a minor perf improvement.\n */\nconst configExplorer = cosmiconfigSync(configName, {\n\tsearchPlaces: [\n\t\t`${configName}.config.cjs`,\n\t\t`${configName}.config.js`,\n\n\t\t// Load from the fluidBuild config files as a fallback.\n\t\t\"fluidBuild.config.cjs\",\n\t\t\"fluidBuild.config.js\",\n\n\t\t// Or the buildProject property in package.json\n\t\t\"package.json\",\n\t],\n\tpackageProp: [configName],\n});\n\n/**\n * Search a path for a build project config file, and return the parsed config and the path to the config file.\n *\n * @param searchPath - The path to start searching for config files in.\n * @param noCache - If true, the config cache will be cleared and the config will be reloaded.\n * @returns The loaded build project config and the path to the config file.\n *\n * @throws If a config is not found or if the config version is not supported.\n */\nexport function getBuildProjectConfig(\n\tsearchPath: string,\n\tnoCache = false,\n): { config: BuildProjectConfig; configFilePath: string } {\n\tif (noCache === true) {\n\t\tconfigExplorer.clearCaches();\n\t}\n\n\tconst configResult = configExplorer.search(searchPath);\n\tif (configResult === null || configResult === undefined) {\n\t\tthrow new Error(\"No BuildProject configuration found.\");\n\t}\n\tconst config = configResult.config as BuildProjectConfigV1;\n\n\t// Only versions higher than the minimum are supported. If any other value is provided, throw an error.\n\tif (config.version < BUILDPROJECT_CONFIG_MIN_VERSION) {\n\t\tthrow new Error(\n\t\t\t`Configuration version is not supported: ${config?.version}. Config version must be >= ${BUILDPROJECT_CONFIG_MIN_VERSION}.`,\n\t\t);\n\t}\n\n\treturn { config, configFilePath: configResult.filepath };\n}\n"]}