{"version":3,"file":"versions.js","sourceRoot":"","sources":["../src/versions.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAIH,OAAO,EAAE,0BAA0B,EAAE,MAAM,uBAAuB,CAAC;AAGnE;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,UAAU,CAC/B,QAAuB,EACvB,OAAe;IAEf,MAAM,iBAAiB,GAAG,OAAO,CAAC;IAClC,MAAM,kBAAkB,GAAoB,EAAE,CAAC;IAC/C,KAAK,MAAM,GAAG,IAAI,QAAQ,EAAE,CAAC;QAC5B,kBAAkB,CAAC,IAAI,CACtB,0BAA0B,CAAI,GAAG,CAAC,SAAS,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE;YAC3D,IAAI,CAAC,OAAO,GAAG,iBAAiB,CAAC,OAAO,CAAC;QAC1C,CAAC,CAAC,CACF,CAAC;IACH,CAAC;IACD,MAAM,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;IAEtC,wDAAwD;IACxD,KAAK,MAAM,GAAG,IAAI,QAAQ,EAAE,CAAC;QAC5B,GAAG,CAAC,MAAM,EAAE,CAAC;IACd,CAAC;AACF,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport type { SemVer } from \"semver\";\n\nimport { updatePackageJsonFileAsync } from \"./packageJsonUtils.js\";\nimport type { IPackage, PackageJson } from \"./types.js\";\n\n/**\n * Sets the version of a group of packages, writing the new version in package.json. After the update, the packages are\n * reloaded so the in-memory data reflects the version changes.\n *\n * @param packages - An array of objects whose version should be updated.\n * @param version - The version to set.\n */\nexport async function setVersion<J extends PackageJson>(\n\tpackages: IPackage<J>[],\n\tversion: SemVer,\n): Promise<void> {\n\tconst translatedVersion = version;\n\tconst setPackagePromises: Promise<void>[] = [];\n\tfor (const pkg of packages) {\n\t\tsetPackagePromises.push(\n\t\t\tupdatePackageJsonFileAsync<J>(pkg.directory, async (json) => {\n\t\t\t\tjson.version = translatedVersion.version;\n\t\t\t}),\n\t\t);\n\t}\n\tawait Promise.all(setPackagePromises);\n\n\t// Reload all the packages to refresh the in-memory data\n\tfor (const pkg of packages) {\n\t\tpkg.reload();\n\t}\n}\n"]}