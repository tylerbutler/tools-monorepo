{"version":3,"file":"package.js","sourceRoot":"","sources":["../src/package.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,EAAE,UAAU,EAAE,MAAM,SAAS,CAAC;AACrC,OAAO,KAAK,IAAI,MAAM,WAAW,CAAC;AAElC,OAAO,MAAM,MAAM,UAAU,CAAC;AAC9B,gHAAgH;AAChH,MAAM,EAAE,YAAY,EAAE,GAAG,MAAM,CAAC;AAChC,OAAO,MAAM,MAAM,YAAY,CAAC;AAEhC,OAAO,EAA4B,0BAA0B,EAAE,MAAM,aAAa,CAAC;AACnF,OAAO,EAAE,wBAAwB,EAAE,gBAAgB,EAAE,MAAM,uBAAuB,CAAC;AAUnF,OAAO,EAAE,aAAa,EAAE,MAAM,YAAY,CAAC;AAE3C;;;;;;;GAOG;AACH,MAAM,OAAgB,WAAW;IAgDf;IAUA;IAKA;IAKA;IAKT;IApER,uGAAuG;IAC/F,MAAM,CAAC,YAAY,GAAW,CAAC,CAAC;IAChC,MAAM,CAAU,aAAa,GAAG;QACvC,MAAM,CAAC,GAAG;QACV,MAAM,CAAC,KAAK;QACZ,MAAM,CAAC,MAAM;QACb,MAAM,CAAC,IAAI;QACX,MAAM,CAAC,OAAO;QACd,MAAM,CAAC,IAAI;QACX,MAAM,CAAC,KAAK;QACZ,MAAM,CAAC,IAAI;QACX,MAAM,CAAC,SAAS;QAChB,MAAM,CAAC,WAAW;QAClB,MAAM,CAAC,YAAY;QACnB,MAAM,CAAC,UAAU;QACjB,MAAM,CAAC,aAAa;QACpB,MAAM,CAAC,UAAU;QACjB,MAAM,CAAC,WAAW;KAClB,CAAC;IAEe,OAAO,CAAS;IACzB,YAAY,CAAI;IACP,SAAS,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC;IAEpD,4EAA4E;IAC5E,IAAY,KAAK;QAChB,oEAAoE;QACpE,OAAO,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,aAAa,CAAC,MAAM,CAAE,CAAC;IAC9E,CAAC;IAED;;;;;;;;OAQG;IACH;IACC;;OAEG;IACa,mBAA2B;IAE3C;;OAEG;IACH,mDAAmD;IAEnD;;OAEG;IACa,SAAqB;IAErC;;OAEG;IACa,eAAwB;IAExC;;OAEG;IACa,YAA8B;IAE9C;;OAEG;IACI,kBAA2B,EAClC,oBAAgC;QA1BhB,wBAAmB,GAAnB,mBAAmB,CAAQ;QAU3B,cAAS,GAAT,SAAS,CAAY;QAKrB,oBAAe,GAAf,eAAe,CAAS;QAKxB,iBAAY,GAAZ,YAAY,CAAkB;QAKvC,uBAAkB,GAAlB,kBAAkB,CAAS;QAGlC,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,wBAAwB,CAAC,mBAAmB,CAAC,CAAC;QAClF,IAAI,oBAAoB,KAAK,SAAS,EAAE,CAAC;YACxC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC;QAC3C,CAAC;IACF,CAAC;IAED;;OAEG;IACH,IAAW,oBAAoB;QAC9B,OAAO,mBAAmB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC9C,CAAC;IAED;;OAEG;IACH,IAAW,SAAS;QACnB,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;IAC/C,CAAC;IAED;;OAEG;IACH,IAAW,IAAI;QACd,OAAO,IAAI,CAAC,WAAW,CAAC,IAAmB,CAAC;IAC7C,CAAC;IAED;;OAEG;IACH,IAAW,WAAW;QACrB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAED;;OAEG;IACH,IAAW,WAAW;QACrB,OAAO,IAAI,CAAC,YAAY,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,IAAW,OAAO;QACjB,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,IAAI,KAAK,CAAC;IAC1C,CAAC;IAED;;OAEG;IACH,IAAW,OAAO;QACjB,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC;IACjC,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,eAAe;QAC3B,gBAAgB,CAAC,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IAC5E,CAAC;IAED;;OAEG;IACI,MAAM;QACZ,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC,mBAAmB,CAAM,CAAC;IACjE,CAAC;IAEM,QAAQ;QACd,OAAO,GAAG,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,SAAS,GAAG,CAAC;IAC3C,CAAC;IAED;;OAEG;IACI,SAAS,CAAC,IAAY;QAC5B,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC5F,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,YAAY;QACxB,IAAI,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC;YACpD,kBAAkB;YAClB,OAAO,IAAI,CAAC;QACb,CAAC;QAED,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC,EAAE,CAAC;YAC5D,OAAO,CAAC,GAAG,IAAI,CAAC,WAAW,mCAAmC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;QACjF,CAAC;QAED,MAAM,MAAM,GAAa,EAAE,CAAC;QAC5B,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAC7C,MAAM,KAAK,GAAG,eAAe,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;YAEnD,IAAI,CAAC,KAAK,EAAE,CAAC;gBACZ,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,WAAW,gBAAgB,GAAG,CAAC,IAAI,YAAY,CAAC,CAAC;YACtE,CAAC;QACF,CAAC;QACD,OAAO,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC;IAC5C,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,OAAO,CAAC,cAAuB;QAC3C,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;IAC/C,CAAC;;AAGF;;;;;;GAMG;AACH,MAAM,OAGJ,SAAQ,WAAyB;IAClC;;;;;;;;;;OAUG;IACI,MAAM,CAAC,2BAA2B,CAMxC,mBAA2B,EAC3B,eAAwB,EACxB,mBAAwC,EACxC,SAAqB,EACrB,oBAAgC;QAEhC,MAAM,WAAW,GAAiB,YAAY,CAAC,mBAAmB,CAAO;aACvE,IAAmB,CAAC;QACtB,MAAM,gBAAgB,GAAG,0BAA0B,CAClD,WAAW,EACX,mBAAmB,CAAC,aAAa,CACjC,CAAC;QAEF,IAAI,gBAAgB,KAAK,SAAS,EAAE,CAAC;YACpC,MAAM,IAAI,KAAK,CAAC,0CAA0C,WAAW,GAAG,CAAC,CAAC;QAC3E,CAAC;QAED,MAAM,sBAAsB,GAC3B,mBAAmB,CAAC,aAAa,CAAC,gBAA0B,CAAC,CAAC;QAE/D,IAAI,sBAAsB,KAAK,SAAS,EAAE,CAAC;YAC1C,MAAM,IAAI,KAAK,CAAC,4CAA4C,gBAAgB,EAAE,CAAC,CAAC;QACjF,CAAC;QAED,MAAM,EAAE,eAAe,EAAE,GAAG,sBAAsB,CAAC;QACnD,MAAM,kBAAkB,GACvB,eAAe,KAAK,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,WAAW,KAAK,eAAe,CAAC;QAEzE,MAAM,GAAG,GAAG,IAAI,IAAI,CACnB,mBAAmB;QACnB,kBAAkB;QAClB,SAAS,EACT,eAAe,EACf,gBAAgB,EAChB,kBAAkB,EAClB,oBAAoB,CACpB,CAAC;QAEF,OAAO,GAAG,CAAC;IACZ,CAAC;CACD;AAED;;;;;;;;;GASG;AACH,MAAM,UAAU,kCAAkC,CACjD,mBAA2B,EAC3B,eAAwB,EACxB,mBAAwC,EACxC,SAAqB;IAErB,OAAO,OAAO,CAAC,2BAA2B,CACzC,mBAAmB,EACnB,eAAe,EACf,mBAAmB,EACnB,SAAS,CACT,CAAC;AACH,CAAC;AAED;;;;GAIG;AACH,QAAQ,CAAC,CAAC,mBAAmB,CAC5B,WAAc;IAEd,KAAK,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,YAAY,IAAI,EAAE,CAAC,EAAE,CAAC;QACjF,MAAM,IAAI,GAAG,OAAsB,CAAC;QACpC,IAAI,OAAO,KAAK,SAAS,EAAE,CAAC;YAC3B,MAAM,IAAI,KAAK,CAAC,iDAAiD,IAAI,EAAE,CAAC,CAAC;QAC1E,CAAC;QACD,MAAM;YACL,IAAI;YACJ,OAAO;YACP,OAAO,EAAE,MAAM;SACN,CAAC;IACZ,CAAC;IAED,KAAK,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,eAAe,IAAI,EAAE,CAAC,EAAE,CAAC;QACpF,MAAM,IAAI,GAAG,OAAsB,CAAC;QACpC,IAAI,OAAO,KAAK,SAAS,EAAE,CAAC;YAC3B,MAAM,IAAI,KAAK,CAAC,iDAAiD,IAAI,EAAE,CAAC,CAAC;QAC1E,CAAC;QACD,MAAM;YACL,IAAI;YACJ,OAAO;YACP,OAAO,EAAE,KAAK;SACL,CAAC;IACZ,CAAC;IAED,KAAK,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,eAAe,IAAI,EAAE,CAAC,EAAE,CAAC;QACpF,MAAM,IAAI,GAAG,OAAsB,CAAC;QACpC,IAAI,OAAO,KAAK,SAAS,EAAE,CAAC;YAC3B,MAAM,IAAI,KAAK,CAAC,iDAAiD,IAAI,EAAE,CAAC,CAAC;QAC1E,CAAC;QACD,MAAM;YACL,IAAI;YACJ,OAAO;YACP,OAAO,EAAE,MAAM;SACN,CAAC;IACZ,CAAC;AACF,CAAC;AAED;;;;;;;GAOG;AACH,SAAS,eAAe,CAAC,WAAmB,EAAE,UAA6B;IAC1E,MAAM,YAAY,GAAG,aAAa,CAAC,WAAW,EAAE,CAAC,UAAU,EAAE,EAAE;QAC9D,0EAA0E;QAC1E,OAAO,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,cAAc,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3E,CAAC,CAAC,CAAC;IAEH,OAAO,YAAY,KAAK,SAAS,CAAC;AACnC,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { existsSync } from \"node:fs\";\nimport * as path from \"node:path\";\n\nimport fsePkg from \"fs-extra\";\n// eslint-disable-next-line import/no-named-as-default-member -- Imports are written this way for CJS/ESM compat\nconst { readJsonSync } = fsePkg;\nimport colors from \"picocolors\";\n\nimport { type WorkspaceDefinition, findReleaseGroupForPackage } from \"./config.js\";\nimport { readPackageJsonAndIndent, writePackageJson } from \"./packageJsonUtils.js\";\nimport type {\n\tAdditionalPackageProps,\n\tIPackage,\n\tIWorkspace,\n\tPackageDependency,\n\tPackageJson,\n\tPackageName,\n\tReleaseGroupName,\n} from \"./types.js\";\nimport { lookUpDirSync } from \"./utils.js\";\n\n/**\n * A base class for npm packages. A custom type can be used for the package.json schema, which is useful\n * when the package.json has custom keys/values.\n *\n * @typeParam J - The package.json type to use. This type must extend the {@link PackageJson} type defined in this\n * package.\n * @typeParam TAddProps - Additional typed props that will be added to the package object.\n */\nexport abstract class PackageBase<\n\tJ extends PackageJson = PackageJson,\n\tTAddProps extends AdditionalPackageProps = undefined,\n> implements IPackage<J>\n{\n\t// eslint-disable-next-line @typescript-eslint/prefer-readonly -- false positive; this value is changed\n\tprivate static packageCount: number = 0;\n\tprivate static readonly colorFunction = [\n\t\tcolors.red,\n\t\tcolors.green,\n\t\tcolors.yellow,\n\t\tcolors.blue,\n\t\tcolors.magenta,\n\t\tcolors.cyan,\n\t\tcolors.white,\n\t\tcolors.gray,\n\t\tcolors.redBright,\n\t\tcolors.greenBright,\n\t\tcolors.yellowBright,\n\t\tcolors.blueBright,\n\t\tcolors.magentaBright,\n\t\tcolors.cyanBright,\n\t\tcolors.whiteBright,\n\t];\n\n\tprivate readonly _indent: string;\n\tprivate _packageJson: J;\n\tprivate readonly packageId = Package.packageCount++;\n\n\t// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n\tprivate get color() {\n\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\treturn Package.colorFunction[this.packageId % Package.colorFunction.length]!;\n\t}\n\n\t/**\n\t * Create a new package from a package.json file. **Prefer the .load method to calling the contructor directly.**\n\t *\n\t * @param packageJsonFilePath - The path to a package.json file.\n\t * @param packageManager - The package manager used by the workspace.\n\t * @param isWorkspaceRoot - Set to true if this package is the root of a workspace.\n\t * @param additionalProperties - An object with additional properties that should be added to the class. This is\n\t * useful to augment the package class with additional properties.\n\t */\n\tpublic constructor(\n\t\t/**\n\t\t * {@inheritDoc IPackage.packageJsonFilePath}\n\t\t */\n\t\tpublic readonly packageJsonFilePath: string,\n\n\t\t/**\n\t\t * {@inheritDoc IPackage.packageManager}\n\t\t */\n\t\t// public readonly packageManager: IPackageManager,\n\n\t\t/**\n\t\t * {@inheritDoc IPackage.workspace}\n\t\t */\n\t\tpublic readonly workspace: IWorkspace,\n\n\t\t/**\n\t\t * {@inheritDoc IPackage.isWorkspaceRoot}\n\t\t */\n\t\tpublic readonly isWorkspaceRoot: boolean,\n\n\t\t/**\n\t\t * {@inheritDoc IPackage.releaseGroup}\n\t\t */\n\t\tpublic readonly releaseGroup: ReleaseGroupName,\n\n\t\t/**\n\t\t * {@inheritDoc IPackage.isReleaseGroupRoot}\n\t\t */\n\t\tpublic isReleaseGroupRoot: boolean,\n\t\tadditionalProperties?: TAddProps,\n\t) {\n\t\t[this._packageJson, this._indent] = readPackageJsonAndIndent(packageJsonFilePath);\n\t\tif (additionalProperties !== undefined) {\n\t\t\tObject.assign(this, additionalProperties);\n\t\t}\n\t}\n\n\t/**\n\t * {@inheritDoc IPackage.combinedDependencies}\n\t */\n\tpublic get combinedDependencies(): Generator<PackageDependency, void> {\n\t\treturn iterateDependencies(this.packageJson);\n\t}\n\n\t/**\n\t * {@inheritDoc IPackage.directory}\n\t */\n\tpublic get directory(): string {\n\t\treturn path.dirname(this.packageJsonFilePath);\n\t}\n\n\t/**\n\t * {@inheritDoc IPackage.name}\n\t */\n\tpublic get name(): PackageName {\n\t\treturn this.packageJson.name as PackageName;\n\t}\n\n\t/**\n\t * {@inheritDoc IPackage.nameColored}\n\t */\n\tpublic get nameColored(): string {\n\t\treturn this.color(this.name);\n\t}\n\n\t/**\n\t * {@inheritDoc IPackage.packageJson}\n\t */\n\tpublic get packageJson(): J {\n\t\treturn this._packageJson;\n\t}\n\n\t/**\n\t * {@inheritDoc IPackage.private}\n\t */\n\tpublic get private(): boolean {\n\t\treturn this.packageJson.private ?? false;\n\t}\n\n\t/**\n\t * {@inheritDoc IPackage.version}\n\t */\n\tpublic get version(): string {\n\t\treturn this.packageJson.version;\n\t}\n\n\t/**\n\t * {@inheritDoc IPackage.savePackageJson}\n\t */\n\tpublic async savePackageJson(): Promise<void> {\n\t\twritePackageJson(this.packageJsonFilePath, this.packageJson, this._indent);\n\t}\n\n\t/**\n\t * Reload the package from the on-disk package.json.\n\t */\n\tpublic reload(): void {\n\t\tthis._packageJson = readJsonSync(this.packageJsonFilePath) as J;\n\t}\n\n\tpublic toString(): string {\n\t\treturn `${this.name} (${this.directory})`;\n\t}\n\n\t/**\n\t * {@inheritDoc IPackage.getScript}\n\t */\n\tpublic getScript(name: string): string | undefined {\n\t\treturn this.packageJson.scripts === undefined ? undefined : this.packageJson.scripts[name];\n\t}\n\n\t/**\n\t * {@inheritDoc Installable.checkInstall}\n\t */\n\tpublic async checkInstall(): Promise<true | string[]> {\n\t\tif (this.combinedDependencies.next().done === true) {\n\t\t\t// No dependencies\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!existsSync(path.join(this.directory, \"node_modules\"))) {\n\t\t\treturn [`${this.nameColored}: node_modules not installed in ${this.directory}`];\n\t\t}\n\n\t\tconst errors: string[] = [];\n\t\tfor (const dep of this.combinedDependencies) {\n\t\t\tconst found = checkDependency(this.directory, dep);\n\n\t\t\tif (!found) {\n\t\t\t\terrors.push(`${this.nameColored}: dependency ${dep.name} not found`);\n\t\t\t}\n\t\t}\n\t\treturn errors.length === 0 ? true : errors;\n\t}\n\n\t/**\n\t * Installs the dependencies for all packages in this package's workspace.\n\t */\n\tpublic async install(updateLockfile: boolean): Promise<boolean> {\n\t\treturn this.workspace.install(updateLockfile);\n\t}\n}\n\n/**\n * A concrete class that is used internally within build-infrastructure as the concrete {@link IPackage} implementation.\n *\n * @typeParam J - The package.json type to use. This type must extend the {@link PackageJson} type defined in this\n * package.\n * @typeParam TAddProps - Additional typed props that will be added to the package object.\n */\nclass Package<\n\tJ extends PackageJson = PackageJson,\n\tTAddProps extends AdditionalPackageProps = undefined,\n> extends PackageBase<J, TAddProps> {\n\t/**\n\t * Loads an {@link IPackage} from a {@link WorkspaceDefinition}.\n\t *\n\t * @param packageJsonFilePath - The path to the package.json for the package being loaded.\n\t * @param packageManager - The package manager to use.\n\t * @param isWorkspaceRoot - Set to `true` if the package is a workspace root package.\n\t * @param workspaceDefinition - The workspace definition.\n\t * @param workspace - The workspace that this package belongs to.\n\t * @param additionalProperties - Additional properties that will be added to the package object.\n\t * @returns A loaded {@link IPackage} instance.\n\t */\n\tpublic static loadFromWorkspaceDefinition<\n\t\tT extends typeof Package,\n\t\tJ extends PackageJson = PackageJson,\n\t\tTAddProps extends AdditionalPackageProps = undefined,\n\t>(\n\t\tthis: T,\n\t\tpackageJsonFilePath: string,\n\t\tisWorkspaceRoot: boolean,\n\t\tworkspaceDefinition: WorkspaceDefinition,\n\t\tworkspace: IWorkspace,\n\t\tadditionalProperties?: TAddProps,\n\t): IPackage {\n\t\tconst packageName: PackageName = (readJsonSync(packageJsonFilePath) as J)\n\t\t\t.name as PackageName;\n\t\tconst releaseGroupName = findReleaseGroupForPackage(\n\t\t\tpackageName,\n\t\t\tworkspaceDefinition.releaseGroups,\n\t\t);\n\n\t\tif (releaseGroupName === undefined) {\n\t\t\tthrow new Error(`Cannot find release group for package '${packageName}'`);\n\t\t}\n\n\t\tconst releaseGroupDefinition =\n\t\t\tworkspaceDefinition.releaseGroups[releaseGroupName as string];\n\n\t\tif (releaseGroupDefinition === undefined) {\n\t\t\tthrow new Error(`Cannot find release group definition for ${releaseGroupName}`);\n\t\t}\n\n\t\tconst { rootPackageName } = releaseGroupDefinition;\n\t\tconst isReleaseGroupRoot =\n\t\t\trootPackageName === undefined ? false : packageName === rootPackageName;\n\n\t\tconst pkg = new this(\n\t\t\tpackageJsonFilePath,\n\t\t\t// packageManager,\n\t\t\tworkspace,\n\t\t\tisWorkspaceRoot,\n\t\t\treleaseGroupName,\n\t\t\tisReleaseGroupRoot,\n\t\t\tadditionalProperties,\n\t\t);\n\n\t\treturn pkg;\n\t}\n}\n\n/**\n * Loads an {@link IPackage} from a {@link WorkspaceDefinition}.\n *\n * @param packageJsonFilePath - The path to the package.json for the package being loaded.\n * @param packageManager - The package manager to use.\n * @param isWorkspaceRoot - Set to `true` if the package is a workspace root package.\n * @param workspaceDefinition - The workspace definition.\n * @param workspace - The workspace that this package belongs to.\n * @returns A loaded {@link IPackage} instance.\n */\nexport function loadPackageFromWorkspaceDefinition(\n\tpackageJsonFilePath: string,\n\tisWorkspaceRoot: boolean,\n\tworkspaceDefinition: WorkspaceDefinition,\n\tworkspace: IWorkspace,\n): IPackage {\n\treturn Package.loadFromWorkspaceDefinition(\n\t\tpackageJsonFilePath,\n\t\tisWorkspaceRoot,\n\t\tworkspaceDefinition,\n\t\tworkspace,\n\t);\n}\n\n/**\n * A generator function that returns all production, dev, and peer dependencies in package.json.\n *\n * @param packageJson - The package.json whose dependencies should be iterated.\n */\nfunction* iterateDependencies<T extends PackageJson>(\n\tpackageJson: T,\n): Generator<PackageDependency, void> {\n\tfor (const [pkgName, version] of Object.entries(packageJson.dependencies ?? {})) {\n\t\tconst name = pkgName as PackageName;\n\t\tif (version === undefined) {\n\t\t\tthrow new Error(`Dependency found without a version specifier: ${name}`);\n\t\t}\n\t\tyield {\n\t\t\tname,\n\t\t\tversion,\n\t\t\tdepKind: \"prod\",\n\t\t} as const;\n\t}\n\n\tfor (const [pkgName, version] of Object.entries(packageJson.devDependencies ?? {})) {\n\t\tconst name = pkgName as PackageName;\n\t\tif (version === undefined) {\n\t\t\tthrow new Error(`Dependency found without a version specifier: ${name}`);\n\t\t}\n\t\tyield {\n\t\t\tname,\n\t\t\tversion,\n\t\t\tdepKind: \"dev\",\n\t\t} as const;\n\t}\n\n\tfor (const [pkgName, version] of Object.entries(packageJson.devDependencies ?? {})) {\n\t\tconst name = pkgName as PackageName;\n\t\tif (version === undefined) {\n\t\t\tthrow new Error(`Dependency found without a version specifier: ${name}`);\n\t\t}\n\t\tyield {\n\t\t\tname,\n\t\t\tversion,\n\t\t\tdepKind: \"peer\",\n\t\t} as const;\n\t}\n}\n\n/**\n * Checks if a dependency is installed by looking up the folder tree's node_modules folders and looking for the\n * dependent package. If the dependency's folder in node_modules is found, the dependency is considered installed.\n *\n * @remarks\n *\n * Note that the version of the dependency is _not_ checked.\n */\nfunction checkDependency(packagePath: string, dependency: PackageDependency): boolean {\n\tconst foundDepPath = lookUpDirSync(packagePath, (currentDir) => {\n\t\t// TODO: check that the version matches the requested semver range as well\n\t\treturn existsSync(path.join(currentDir, \"node_modules\", dependency.name));\n\t});\n\n\treturn foundDepPath !== undefined;\n}\n"]}