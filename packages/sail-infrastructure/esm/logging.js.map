{"version":3,"file":"logging.js","sourceRoot":"","sources":["../src/logging.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,KAAK,MAAM,YAAY,CAAC;AAqD/B;;GAEG;AACH,MAAM,CAAC,MAAM,aAAa,GAAW;IACpC;;OAEG;IACH,GAAG;IAEH;;OAEG;IACH,IAAI;IAEJ;;OAEG;IACH,OAAO;IAEP;;OAEG;IACH,QAAQ;IAER;;OAEG;IACH,OAAO;CACP,CAAC;AAEF,SAAS,WAAW,CAAC,GAA+B,EAAE,OAA6B;IAClF,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;IACxB,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE,CAAC;IACvC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACxB,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC;IACrB,CAAC;IACD,IAAI,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC,QAAQ,EAAE,CAAC;IACxC,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACvB,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;IACnB,CAAC;IACD,IAAI,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC,QAAQ,EAAE,CAAC;IACxC,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACvB,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;IACnB,CAAC;IACD,qEAAqE;IACrE,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;AAC5D,CAAC;AAED,SAAS,GAAG,CAAC,GAAuB;IACnC,WAAW,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;AAC/B,CAAC;AAED,SAAS,IAAI,CAAC,GAA+B;IAC5C,WAAW,CAAC,SAAS,GAAG,EAAE,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;AAC1C,CAAC;AAED,SAAS,OAAO,CAAC,GAA+B;IAC/C,WAAW,CAAC,YAAY,GAAG,EAAE,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;AAC7C,CAAC;AAED,SAAS,OAAO,CAAC,GAA+B;IAC/C,WAAW,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,GAAG,EAAE,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;AAChE,CAAC;AAED,SAAS,QAAQ,CAAC,GAA+B;IAChD,WAAW,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,GAAG,EAAE,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;AAC7D,CAAC","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport chalk from \"picocolors\";\n\n/**\n * A function that logs an Error or error message.\n */\nexport type ErrorLoggingFunction = (msg: string | Error | undefined, ...args: any[]) => void;\n\n/**\n * A function that logs an error message.\n */\nexport type LoggingFunction = (message?: string, ...args: any[]) => void;\n\n/**\n * A general-purpose logger object.\n *\n * @remarks\n *\n * The `log` method is the primary logging function. The other functions can be used to support logging at different\n * levels. Methods other than `log` may modify the error message in some way (e.g. by prepending some text to it).\n */\nexport interface Logger {\n\t/**\n\t * Logs an error message as-is.\n\t */\n\tlog: LoggingFunction;\n\n\t/**\n\t * Logs an informational message.\n\t */\n\tinfo: ErrorLoggingFunction;\n\n\t/**\n\t * Logs a warning message.\n\t */\n\twarning: ErrorLoggingFunction;\n\n\t/**\n\t * Logs an error message.\n\t *\n\t * @remarks\n\t *\n\t * This method is not named 'error' because it conflicts with the method that oclif has on its Command class.\n\t * That method exits the process in addition to logging, so this method exists to differentiate, and provide\n\t * error logging that doesn't exit the process.\n\t */\n\terrorLog: ErrorLoggingFunction;\n\n\t/**\n\t * Logs a verbose message.\n\t */\n\tverbose: ErrorLoggingFunction;\n}\n\n/**\n * A {@link Logger} that logs directly to the console.\n */\nexport const defaultLogger: Logger = {\n\t/**\n\t * {@inheritDoc Logger.log}\n\t */\n\tlog,\n\n\t/**\n\t * {@inheritDoc Logger.info}\n\t */\n\tinfo,\n\n\t/**\n\t * {@inheritDoc Logger.warning}\n\t */\n\twarning,\n\n\t/**\n\t * {@inheritDoc Logger.errorLog}\n\t */\n\terrorLog,\n\n\t/**\n\t * {@inheritDoc Logger.verbose}\n\t */\n\tverbose,\n};\n\nfunction logWithTime(msg: string | Error | undefined, logFunc: ErrorLoggingFunction): void {\n\tconst date = new Date();\n\tlet hours = date.getHours().toString();\n\tif (hours.length === 1) {\n\t\thours = `0${hours}`;\n\t}\n\tlet mins = date.getMinutes().toString();\n\tif (mins.length === 1) {\n\t\tmins = `0${mins}`;\n\t}\n\tlet secs = date.getSeconds().toString();\n\tif (secs.length === 1) {\n\t\tsecs = `0${secs}`;\n\t}\n\t// eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n\tlogFunc(chalk.yellow(`[${hours}:${mins}:${secs}] `) + msg);\n}\n\nfunction log(msg: string | undefined): void {\n\tlogWithTime(msg, console.log);\n}\n\nfunction info(msg: string | Error | undefined): void {\n\tlogWithTime(`INFO: ${msg}`, console.log);\n}\n\nfunction verbose(msg: string | Error | undefined): void {\n\tlogWithTime(`VERBOSE: ${msg}`, console.log);\n}\n\nfunction warning(msg: string | Error | undefined): void {\n\tlogWithTime(`${chalk.yellow(`WARNING`)}: ${msg}`, console.log);\n}\n\nfunction errorLog(msg: string | Error | undefined): void {\n\tlogWithTime(`${chalk.red(`ERROR`)}: ${msg}`, console.error);\n}\n"]}