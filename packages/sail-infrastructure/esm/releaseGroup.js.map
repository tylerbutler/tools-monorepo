{"version":3,"file":"releaseGroup.js","sourceRoot":"","sources":["../src/releaseGroup.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { type ReleaseGroupDefinition, matchesReleaseGroupDefinition } from \"./config.js\";\nimport type {\n\tIPackage,\n\tIReleaseGroup,\n\tIWorkspace,\n\tPackageName,\n\tReleaseGroupName,\n} from \"./types.js\";\n\n/**\n * {@inheritDoc IReleaseGroup}\n */\nexport class ReleaseGroup implements IReleaseGroup {\n\t/**\n\t * {@inheritDoc IReleaseGroup.name}\n\t */\n\tpublic readonly name: ReleaseGroupName;\n\n\t/**\n\t * {@inheritDoc IReleaseGroup.adoPipelineUrl}\n\t */\n\tpublic readonly adoPipelineUrl: string | undefined;\n\n\tpublic constructor(\n\t\tname: string,\n\t\treleaseGroupDefinition: ReleaseGroupDefinition,\n\n\t\t/**\n\t\t * {@inheritDoc IReleaseGroup.workspace}\n\t\t */\n\t\tpublic workspace: IWorkspace,\n\n\t\t/**\n\t\t * {@inheritDoc IReleaseGroup.rootPackage}\n\t\t */\n\t\tpublic readonly rootPackage?: IPackage,\n\t) {\n\t\tthis.name = name as ReleaseGroupName;\n\t\tthis.adoPipelineUrl = releaseGroupDefinition.adoPipelineUrl;\n\t\tthis.packages = workspace.packages\n\t\t\t.filter((pkg) => matchesReleaseGroupDefinition(pkg, releaseGroupDefinition))\n\t\t\t.map((pkg) => {\n\t\t\t\t// update the release group in the package object so we have an easy way to get from packages to release groups\n\t\t\t\tpkg.releaseGroup = this.name;\n\t\t\t\treturn pkg;\n\t\t\t});\n\n\t\tif (releaseGroupDefinition.rootPackageName !== undefined) {\n\t\t\t// Find the root package in the set of release group packages\n\t\t\tconst releaseGroupRoot = this.packages.find(\n\t\t\t\t(pkg) => pkg.name === releaseGroupDefinition.rootPackageName,\n\t\t\t);\n\t\t\tif (releaseGroupRoot === undefined) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Could not find release group root package '${releaseGroupDefinition.rootPackageName}' in release group '${this.name}'`,\n\t\t\t\t);\n\t\t\t}\n\t\t\treleaseGroupRoot.isReleaseGroupRoot = true;\n\t\t}\n\t}\n\n\t/**\n\t * {@inheritDoc IReleaseGroup.packages}\n\t */\n\tpublic readonly packages: IPackage[];\n\n\t/**\n\t * {@inheritDoc IReleaseGroup.version}\n\t */\n\tpublic get version(): string {\n\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\treturn this.packages[0]!.version;\n\t}\n\n\t/**\n\t * {@inheritDoc IReleaseGroup.releaseGroupDependencies}\n\t */\n\tpublic get releaseGroupDependencies(): IReleaseGroup[] {\n\t\tconst dependentReleaseGroups = new Set<IReleaseGroup>();\n\t\tconst ignoredDependencies = new Set<PackageName>();\n\t\tconst buildProject = this.workspace.buildProject;\n\t\tfor (const pkg of this.packages) {\n\t\t\tfor (const { name } of pkg.combinedDependencies) {\n\t\t\t\tif (ignoredDependencies.has(name)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst depPackage = buildProject.packages.get(name);\n\t\t\t\tif (depPackage === undefined || depPackage.releaseGroup === this.name) {\n\t\t\t\t\tignoredDependencies.add(name);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst releaseGroup = buildProject.releaseGroups.get(depPackage.releaseGroup);\n\t\t\t\tif (releaseGroup === undefined) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Cannot find release group \"${depPackage.releaseGroup}\" in workspace \"${this.workspace}\"`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tdependentReleaseGroups.add(releaseGroup);\n\t\t\t}\n\t\t}\n\n\t\treturn [...dependentReleaseGroups];\n\t}\n\n\tpublic toString(): string {\n\t\treturn `${this.name} (RELEASE GROUP)`;\n\t}\n\n\t/**\n\t * Synchronously reload all of the packages in the release group.\n\t */\n\tpublic reload(): void {\n\t\tfor (const pkg of this.packages) {\n\t\t\tpkg.reload();\n\t\t}\n\t}\n}\n"]}