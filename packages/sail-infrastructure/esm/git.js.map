{"version":3,"file":"git.js","sourceRoot":"","sources":["../src/git.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport * as path from \"node:path\";\n\nimport execa from \"execa\";\nimport readPkgUp from \"read-pkg-up\";\nimport type { SimpleGit } from \"simple-git\";\n\nimport { NotInGitRepository } from \"./errors.js\";\nimport type {\n\tIBuildProject,\n\tIPackage,\n\tIReleaseGroup,\n\tIWorkspace,\n\tPackageName,\n} from \"./types.js\";\nimport { isPathUnder } from \"./utils.js\";\n\n/**\n * Returns the absolute path to the nearest Git repository root found starting at `cwd`.\n *\n * @param cwd - The working directory to use to start searching for Git repositories. Defaults to `process.cwd()` if not\n * provided.\n *\n * @throws A `NotInGitRepository` error if no git repo is found.\n *\n * @privateRemarks\n * This function is helpful because it is synchronous. The SimpleGit wrapper is async-only.\n */\nexport function findGitRootSync(cwd = process.cwd()): string {\n\ttry {\n\t\t// This call will throw outside a git repo, which we'll catch and throw a NotInGitRepo error instead.\n\t\tconst result = execa.sync(\"git\", [\"rev-parse\", \"--show-toplevel\"], {\n\t\t\tcwd,\n\t\t\tencoding: \"utf8\",\n\t\t\t// Ignore stdin but pipe (capture) stdout and stderr since git will write to both.\n\t\t\tstdio: [\"ignore\", \"pipe\", \"pipe\"],\n\t\t});\n\n\t\t// If anything was written to stderr, then it's not a git repo.\n\t\t// This is likely unnecessary since the earlier exec call should throw, but just in case, throw here as well.\n\t\tif (result.stderr) {\n\t\t\tthrow new NotInGitRepository(cwd);\n\t\t}\n\n\t\treturn result.stdout.trim();\n\t} catch (error) {\n\t\tconst message = (error as Error).message;\n\t\tif (message.includes(\"not a git repository\")) {\n\t\t\tthrow new NotInGitRepository(cwd);\n\t\t}\n\t\tthrow error;\n\t}\n}\n\n/**\n * Get the merge base between the current HEAD and a remote branch.\n *\n * @param branch - The branch to compare against.\n * @param remote - The remote to compare against. If this is undefined, then the local branch is compared with.\n * @param localRef - The local ref to compare against. Defaults to HEAD.\n * @returns The ref of the merge base between the current HEAD and the remote branch.\n */\nexport async function getMergeBaseRemote(\n\tgit: SimpleGit,\n\tbranch: string,\n\tremote?: string,\n\tlocalRef = \"HEAD\",\n): Promise<string> {\n\tif (remote !== undefined) {\n\t\t// make sure we have the latest remote refs\n\t\tawait git.fetch([remote]);\n\t}\n\n\tconst compareRef = remote === undefined ? branch : `refs/remotes/${remote}/${branch}`;\n\tconst base = await git.raw(\"merge-base\", compareRef, localRef);\n\treturn base;\n}\n\n/**\n * Gets all the files that have changed when compared to another ref. Paths are relative to the root of the git\n * repository.\n *\n * Note that newly added, unstaged files are NOT included.\n */\nexport async function getChangedFilesSinceRef(\n\tgit: SimpleGit,\n\tref: string,\n\tremote?: string,\n): Promise<string[]> {\n\tif (remote !== undefined) {\n\t\t// make sure we have the latest remote refs\n\t\tawait git.fetch([remote]);\n\t}\n\n\t// Find the merge base commit\n\tconst divergedAt = remote === undefined ? ref : await getMergeBaseRemote(git, ref, remote);\n\t// Now we can find which files have changed\n\tconst changed = await git.diff([\n\t\tdivergedAt,\n\t\t\"--name-only\",\n\t\t// Select all file change types except \"broken\"\n\t\t// See https://git-scm.com/docs/git-diff#Documentation/git-diff.txt---diff-filterACDMRTUXB82308203\n\t\t\"--diff-filter=ACDMRTUX\",\n\t]);\n\n\tconst files = changed\n\t\t.split(\"\\n\")\n\t\t.filter((value) => value !== null && value !== undefined && value !== \"\");\n\treturn files;\n}\n\n/**\n * Given an array of file paths, returns a deduplicated array of all of the directories those files are in.\n */\nfunction filePathsToDirectories(files: string[]): string[] {\n\tconst dirs = new Set(files.map((f) => path.dirname(f)));\n\treturn [...dirs];\n}\n\n/**\n * Gets the changed files, directories, release groups, and packages since the given ref.\n *\n * Returned paths are relative to the BuildProject root.\n *\n * @param buildProject - The BuildProject.\n * @param ref - The ref to compare against.\n * @param remote - The remote to compare against.\n * @returns An object containing the changed files, directories, release groups, workspaces, and packages. Note that a\n * package may appear in multiple groups. That is, if a single package in a release group is changed, the releaseGroups\n * value will contain that group, and the packages value will contain only the single package. Also, if two packages are\n * changed, each within separate release groups, the packages value will contain both packages, and the releaseGroups\n * value will contain both release groups.\n */\nexport async function getChangedSinceRef<P extends IPackage>(\n\tbuildProject: IBuildProject<P>,\n\tref: string,\n\tremote?: string,\n): Promise<{\n\tfiles: string[];\n\tdirs: string[];\n\tworkspaces: IWorkspace[];\n\treleaseGroups: IReleaseGroup[];\n\tpackages: P[];\n}> {\n\tconst gitRoot = findGitRootSync(buildProject.root);\n\tconst git = await buildProject.getGitRepository();\n\tconst filesRaw = await getChangedFilesSinceRef(git, ref, remote);\n\tconst files = filesRaw\n\t\t.map(\n\t\t\t// Make paths absolute\n\t\t\t(filePath) => path.join(gitRoot, filePath),\n\t\t)\n\t\t.filter((filePath) => {\n\t\t\t// filter out changed paths that are not under the Fluid repo\n\t\t\t// since only paths under the repo should be included\n\t\t\treturn isPathUnder(buildProject.root, filePath);\n\t\t})\n\t\t.map((filePath) => buildProject.relativeToRepo(filePath));\n\tconst dirs = filePathsToDirectories(files);\n\n\tconst changedPackageNames = dirs\n\t\t.map((dir) => {\n\t\t\tconst cwd = path.resolve(buildProject.root, dir);\n\t\t\treturn readPkgUp.sync({ cwd })?.packageJson.name;\n\t\t})\n\t\t.filter((name): name is string => name !== undefined);\n\n\tconst changedPackages = [...new Set(changedPackageNames)]\n\t\t.map((name) => buildProject.packages.get(name as PackageName))\n\t\t.filter((pkg): pkg is P => pkg !== undefined);\n\n\tconst changedReleaseGroups = [...new Set(changedPackages.map((pkg) => pkg.releaseGroup))]\n\t\t.map((rg) => buildProject.releaseGroups.get(rg))\n\t\t.filter((rg): rg is IReleaseGroup => rg !== undefined);\n\n\tconst changedWorkspaces = [...new Set(changedReleaseGroups.map((ws) => ws.workspace))];\n\n\treturn {\n\t\tfiles,\n\t\tdirs,\n\t\tworkspaces: changedWorkspaces,\n\t\treleaseGroups: changedReleaseGroups,\n\t\tpackages: changedPackages,\n\t};\n}\n\n/**\n * Get a matching git remote name based on a partial URL to the remote repo. It will match the first remote that\n * contains the partialUrl case insensitively.\n *\n * @param partialUrl - partial URL to match case insensitively\n */\nexport async function getRemote(\n\tgit: SimpleGit,\n\tpartialUrl: string | undefined,\n): Promise<string | undefined> {\n\tif (partialUrl === undefined) {\n\t\treturn undefined;\n\t}\n\n\tconst lowerPartialUrl = partialUrl.toLowerCase();\n\tconst remotes = await git.getRemotes(/* verbose */ true);\n\n\tfor (const r of remotes) {\n\t\tif (r.refs.fetch.toLowerCase().includes(lowerPartialUrl)) {\n\t\t\treturn r.name;\n\t\t}\n\t}\n}\n\n/**\n * Returns an array containing repo repo-relative paths to all the files in the provided directory.\n * A given path will only be included once in the array; that is, there will be no duplicate paths.\n * Note that this function excludes files that are deleted locally whether the deletion is staged or not.\n *\n * @param directory - A directory to filter the results by. Only files under this directory will be returned. To\n * return all files in the repo use the value `\".\"`.\n */\nexport async function getFiles(git: SimpleGit, directory: string): Promise<string[]> {\n\t// Note that `--deduplicate` is not used here because it is not available until git version 2.31.0.\n\tconst results = await git.raw(\n\t\t\"ls-files\",\n\t\t// Includes cached (staged) files.\n\t\t\"--cached\",\n\t\t// Includes other (untracked) files that are not ignored.\n\t\t\"--others\",\n\t\t// Excludes files that are ignored by standard ignore rules.\n\t\t\"--exclude-standard\",\n\t\t// Shows the full path of the files relative to the repository root.\n\t\t\"--full-name\",\n\t\tdirectory,\n\t);\n\n\t// Deduplicate the list of files by building a Set.\n\t// This includes paths to deleted, unstaged files, so we get the list of deleted files from git status and remove\n\t// those from the full list.\n\tconst allFiles = new Set(\n\t\tresults\n\t\t\t.split(\"\\n\")\n\t\t\t.map((line) => line.trim())\n\t\t\t// filter out empty lines\n\t\t\t.filter((line) => line !== \"\"),\n\t);\n\tconst status = await git.status();\n\tfor (const deletedFile of status.deleted) {\n\t\tallFiles.delete(deletedFile);\n\t}\n\n\t// Files are already repo root-relative\n\treturn [...allFiles];\n}\n"]}